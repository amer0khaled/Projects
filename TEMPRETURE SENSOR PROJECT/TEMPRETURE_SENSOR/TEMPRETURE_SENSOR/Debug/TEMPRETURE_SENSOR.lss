
TEMPRETURE_SENSOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000e0a  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016e0  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000522  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00002a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c81  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000360  00000000  00000000  00003831  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a0  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00004234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b3  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b0  00000000  00000000  000046a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 04 	call	0x9bc	; 0x9bc <main>
  8a:	0c 94 03 07 	jmp	0xe06	; 0xe06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include "ADC.h"

void ADC_INIT()
{	
	/*SET VCC TO INTERNAL ADC SUPPLIER 2.56 V*/
	SET_BIT(ADMUX , REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX , REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	
	/*DIFFRIENTIAL MODE*/
	SET_BIT(ADMUX , MUX4);
  96:	3c 9a       	sbi	0x07, 4	; 7
	
	/*SET ADC ENABLE*/
	SET_BIT(ADCSRA , ADEN);
  98:	37 9a       	sbi	0x06, 7	; 6
	
	/*CONFIGURE ADC CLOCK TO GET MAX. RESELUTION*/
	SET_BIT(ADCSRA , ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA , ADPS2);
  9c:	32 9a       	sbi	0x06, 2	; 6
	
}
  9e:	08 95       	ret

000000a0 <ADC_READ>:
unsigned short ADC_READ()
{
	unsigned short return_value;
	
	/*set ADC start conversion*/
	SET_BIT(ADCSRA , ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	
	/*STUCK UNTILL FINISH THE COVERSION*/
	while(READ_BIT(ADCSRA , ADSC) == 1);
  a2:	36 99       	sbic	0x06, 6	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_READ+0x2>
	
	return_value = ADCL;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	
	return_value|=(ADCH << 8);
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	
	return return_value;
	
  b4:	08 95       	ret

000000b6 <DIO_SET_PIN_DIR>:

#include "DIO.h"

void DIO_SET_PIN_DIR(unsigned char port, unsigned char pin, unsigned char dir)
{
	switch(port)
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_SET_PIN_DIR+0x6>
  ba:	71 c0       	rjmp	.+226    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
  bc:	85 34       	cpi	r24, 0x45	; 69
  be:	48 f4       	brcc	.+18     	; 0xd2 <DIO_SET_PIN_DIR+0x1c>
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	99 f1       	breq	.+102    	; 0x12a <DIO_SET_PIN_DIR+0x74>
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	08 f0       	brcs	.+2      	; 0xca <DIO_SET_PIN_DIR+0x14>
  c8:	4d c0       	rjmp	.+154    	; 0x164 <DIO_SET_PIN_DIR+0xae>
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_SET_PIN_DIR+0x1a>
  ce:	83 c0       	rjmp	.+262    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
  d2:	82 36       	cpi	r24, 0x62	; 98
  d4:	51 f1       	breq	.+84     	; 0x12a <DIO_SET_PIN_DIR+0x74>
  d6:	83 36       	cpi	r24, 0x63	; 99
  d8:	20 f4       	brcc	.+8      	; 0xe2 <DIO_SET_PIN_DIR+0x2c>
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	09 f0       	breq	.+2      	; 0xe0 <DIO_SET_PIN_DIR+0x2a>
  de:	7b c0       	rjmp	.+246    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
  e2:	83 36       	cpi	r24, 0x63	; 99
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_SET_PIN_DIR+0x32>
  e6:	3e c0       	rjmp	.+124    	; 0x164 <DIO_SET_PIN_DIR+0xae>
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_SET_PIN_DIR+0x38>
  ec:	74 c0       	rjmp	.+232    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  ee:	57 c0       	rjmp	.+174    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
	{
		case 'A':
		case 'a':
		if (dir == 1)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	69 f4       	brne	.+26     	; 0x10e <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
  f4:	2a b3       	in	r18, 0x1a	; 26
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ac 01       	movw	r20, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SET_PIN_DIR+0x4c>
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SET_PIN_DIR+0x48>
 106:	ba 01       	movw	r22, r20
 108:	62 2b       	or	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
		} 
		else
		{
			CLEAR_BIT(DDRA,pin);
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SET_PIN_DIR+0x66>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SET_PIN_DIR+0x62>
 120:	ba 01       	movw	r22, r20
 122:	60 95       	com	r22
 124:	62 23       	and	r22, r18
 126:	6a bb       	out	0x1a, r22	; 26
 128:	08 95       	ret
		break;
		
		
		case 'B':
		case 'b':
		if (dir == 1)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SET_PIN_DIR+0x86>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SET_PIN_DIR+0x82>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SET_PIN_DIR+0xa0>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SET_PIN_DIR+0x9c>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (dir == 1)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SET_PIN_DIR+0xc0>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SET_PIN_DIR+0xbc>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SET_PIN_DIR+0xda>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SET_PIN_DIR+0xd6>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	64 bb       	out	0x14, r22	; 20
 19c:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (dir == 1)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SET_PIN_DIR+0xfa>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SET_PIN_DIR+0xf6>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SET_PIN_DIR+0x114>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SET_PIN_DIR+0x110>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	61 bb       	out	0x11, r22	; 17
 1d6:	08 95       	ret

000001d8 <DIO_SET_PORT_DIR>:
	}
}

void DIO_SET_PORT_DIR(unsigned char port, unsigned char dir)
{
	switch (port)
 1d8:	84 34       	cpi	r24, 0x44	; 68
 1da:	d9 f0       	breq	.+54     	; 0x212 <DIO_SET_PORT_DIR+0x3a>
 1dc:	85 34       	cpi	r24, 0x45	; 69
 1de:	38 f4       	brcc	.+14     	; 0x1ee <DIO_SET_PORT_DIR+0x16>
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	99 f0       	breq	.+38     	; 0x20a <DIO_SET_PORT_DIR+0x32>
 1e4:	83 34       	cpi	r24, 0x43	; 67
 1e6:	98 f4       	brcc	.+38     	; 0x20e <DIO_SET_PORT_DIR+0x36>
 1e8:	81 34       	cpi	r24, 0x41	; 65
 1ea:	a1 f4       	brne	.+40     	; 0x214 <DIO_SET_PORT_DIR+0x3c>
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <DIO_SET_PORT_DIR+0x2e>
 1ee:	82 36       	cpi	r24, 0x62	; 98
 1f0:	61 f0       	breq	.+24     	; 0x20a <DIO_SET_PORT_DIR+0x32>
 1f2:	83 36       	cpi	r24, 0x63	; 99
 1f4:	18 f4       	brcc	.+6      	; 0x1fc <DIO_SET_PORT_DIR+0x24>
 1f6:	81 36       	cpi	r24, 0x61	; 97
 1f8:	69 f4       	brne	.+26     	; 0x214 <DIO_SET_PORT_DIR+0x3c>
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <DIO_SET_PORT_DIR+0x2e>
 1fc:	83 36       	cpi	r24, 0x63	; 99
 1fe:	39 f0       	breq	.+14     	; 0x20e <DIO_SET_PORT_DIR+0x36>
 200:	84 36       	cpi	r24, 0x64	; 100
 202:	41 f4       	brne	.+16     	; 0x214 <DIO_SET_PORT_DIR+0x3c>
 204:	06 c0       	rjmp	.+12     	; 0x212 <DIO_SET_PORT_DIR+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 206:	6a bb       	out	0x1a, r22	; 26
		break;
 208:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB=dir;
 20a:	67 bb       	out	0x17, r22	; 23
		break;
 20c:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=dir;
 20e:	64 bb       	out	0x14, r22	; 20
		break;
 210:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=dir;
 212:	61 bb       	out	0x11, r22	; 17
 214:	08 95       	ret

00000216 <DIO_WRITE_PIN>:
	}
}

void DIO_WRITE_PIN(unsigned char port, unsigned char pin, unsigned char data )
{
	switch(port)
 216:	84 34       	cpi	r24, 0x44	; 68
 218:	09 f4       	brne	.+2      	; 0x21c <DIO_WRITE_PIN+0x6>
 21a:	71 c0       	rjmp	.+226    	; 0x2fe <DIO_WRITE_PIN+0xe8>
 21c:	85 34       	cpi	r24, 0x45	; 69
 21e:	48 f4       	brcc	.+18     	; 0x232 <DIO_WRITE_PIN+0x1c>
 220:	82 34       	cpi	r24, 0x42	; 66
 222:	99 f1       	breq	.+102    	; 0x28a <DIO_WRITE_PIN+0x74>
 224:	83 34       	cpi	r24, 0x43	; 67
 226:	08 f0       	brcs	.+2      	; 0x22a <DIO_WRITE_PIN+0x14>
 228:	4d c0       	rjmp	.+154    	; 0x2c4 <DIO_WRITE_PIN+0xae>
 22a:	81 34       	cpi	r24, 0x41	; 65
 22c:	09 f0       	breq	.+2      	; 0x230 <DIO_WRITE_PIN+0x1a>
 22e:	83 c0       	rjmp	.+262    	; 0x336 <DIO_WRITE_PIN+0x120>
 230:	0f c0       	rjmp	.+30     	; 0x250 <DIO_WRITE_PIN+0x3a>
 232:	82 36       	cpi	r24, 0x62	; 98
 234:	51 f1       	breq	.+84     	; 0x28a <DIO_WRITE_PIN+0x74>
 236:	83 36       	cpi	r24, 0x63	; 99
 238:	20 f4       	brcc	.+8      	; 0x242 <DIO_WRITE_PIN+0x2c>
 23a:	81 36       	cpi	r24, 0x61	; 97
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO_WRITE_PIN+0x2a>
 23e:	7b c0       	rjmp	.+246    	; 0x336 <DIO_WRITE_PIN+0x120>
 240:	07 c0       	rjmp	.+14     	; 0x250 <DIO_WRITE_PIN+0x3a>
 242:	83 36       	cpi	r24, 0x63	; 99
 244:	09 f4       	brne	.+2      	; 0x248 <DIO_WRITE_PIN+0x32>
 246:	3e c0       	rjmp	.+124    	; 0x2c4 <DIO_WRITE_PIN+0xae>
 248:	84 36       	cpi	r24, 0x64	; 100
 24a:	09 f0       	breq	.+2      	; 0x24e <DIO_WRITE_PIN+0x38>
 24c:	74 c0       	rjmp	.+232    	; 0x336 <DIO_WRITE_PIN+0x120>
 24e:	57 c0       	rjmp	.+174    	; 0x2fe <DIO_WRITE_PIN+0xe8>
	{
		case 'A':
		case 'a':
		if (data == 1)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	69 f4       	brne	.+26     	; 0x26e <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 254:	2b b3       	in	r18, 0x1b	; 27
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WRITE_PIN+0x4c>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WRITE_PIN+0x48>
 266:	ba 01       	movw	r22, r20
 268:	62 2b       	or	r22, r18
 26a:	6b bb       	out	0x1b, r22	; 27
 26c:	08 95       	ret
		} 
		else
		{
			CLEAR_BIT(PORTA,pin);
 26e:	2b b3       	in	r18, 0x1b	; 27
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_WRITE_PIN+0x66>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_WRITE_PIN+0x62>
 280:	ba 01       	movw	r22, r20
 282:	60 95       	com	r22
 284:	62 23       	and	r22, r18
 286:	6b bb       	out	0x1b, r22	; 27
 288:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (data == 1)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	69 f4       	brne	.+26     	; 0x2a8 <DIO_WRITE_PIN+0x92>
		{
			SET_BIT(PORTB,pin);
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_WRITE_PIN+0x86>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_WRITE_PIN+0x82>
 2a0:	ba 01       	movw	r22, r20
 2a2:	62 2b       	or	r22, r18
 2a4:	68 bb       	out	0x18, r22	; 24
 2a6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
 2a8:	28 b3       	in	r18, 0x18	; 24
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_WRITE_PIN+0xa0>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_WRITE_PIN+0x9c>
 2ba:	ba 01       	movw	r22, r20
 2bc:	60 95       	com	r22
 2be:	62 23       	and	r22, r18
 2c0:	68 bb       	out	0x18, r22	; 24
 2c2:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (data == 1)
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	69 f4       	brne	.+26     	; 0x2e2 <DIO_WRITE_PIN+0xcc>
		{
			SET_BIT(PORTC,pin);
 2c8:	25 b3       	in	r18, 0x15	; 21
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_WRITE_PIN+0xc0>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_WRITE_PIN+0xbc>
 2da:	ba 01       	movw	r22, r20
 2dc:	62 2b       	or	r22, r18
 2de:	65 bb       	out	0x15, r22	; 21
 2e0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
 2e2:	25 b3       	in	r18, 0x15	; 21
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ac 01       	movw	r20, r24
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_WRITE_PIN+0xda>
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_WRITE_PIN+0xd6>
 2f4:	ba 01       	movw	r22, r20
 2f6:	60 95       	com	r22
 2f8:	62 23       	and	r22, r18
 2fa:	65 bb       	out	0x15, r22	; 21
 2fc:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (data == 1)
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	69 f4       	brne	.+26     	; 0x31c <DIO_WRITE_PIN+0x106>
		{
			SET_BIT(PORTD,pin);
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ac 01       	movw	r20, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_WRITE_PIN+0xfa>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_WRITE_PIN+0xf6>
 314:	ba 01       	movw	r22, r20
 316:	62 2b       	or	r22, r18
 318:	62 bb       	out	0x12, r22	; 18
 31a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
 31c:	22 b3       	in	r18, 0x12	; 18
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	ac 01       	movw	r20, r24
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_WRITE_PIN+0x114>
 326:	44 0f       	add	r20, r20
 328:	55 1f       	adc	r21, r21
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_WRITE_PIN+0x110>
 32e:	ba 01       	movw	r22, r20
 330:	60 95       	com	r22
 332:	62 23       	and	r22, r18
 334:	62 bb       	out	0x12, r22	; 18
 336:	08 95       	ret

00000338 <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char port, unsigned char data)
{
	switch(port)
 338:	84 34       	cpi	r24, 0x44	; 68
 33a:	d9 f0       	breq	.+54     	; 0x372 <DIO_WRITE_PORT+0x3a>
 33c:	85 34       	cpi	r24, 0x45	; 69
 33e:	38 f4       	brcc	.+14     	; 0x34e <DIO_WRITE_PORT+0x16>
 340:	82 34       	cpi	r24, 0x42	; 66
 342:	99 f0       	breq	.+38     	; 0x36a <DIO_WRITE_PORT+0x32>
 344:	83 34       	cpi	r24, 0x43	; 67
 346:	98 f4       	brcc	.+38     	; 0x36e <DIO_WRITE_PORT+0x36>
 348:	81 34       	cpi	r24, 0x41	; 65
 34a:	a1 f4       	brne	.+40     	; 0x374 <DIO_WRITE_PORT+0x3c>
 34c:	0c c0       	rjmp	.+24     	; 0x366 <DIO_WRITE_PORT+0x2e>
 34e:	82 36       	cpi	r24, 0x62	; 98
 350:	61 f0       	breq	.+24     	; 0x36a <DIO_WRITE_PORT+0x32>
 352:	83 36       	cpi	r24, 0x63	; 99
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_WRITE_PORT+0x24>
 356:	81 36       	cpi	r24, 0x61	; 97
 358:	69 f4       	brne	.+26     	; 0x374 <DIO_WRITE_PORT+0x3c>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_WRITE_PORT+0x2e>
 35c:	83 36       	cpi	r24, 0x63	; 99
 35e:	39 f0       	breq	.+14     	; 0x36e <DIO_WRITE_PORT+0x36>
 360:	84 36       	cpi	r24, 0x64	; 100
 362:	41 f4       	brne	.+16     	; 0x374 <DIO_WRITE_PORT+0x3c>
 364:	06 c0       	rjmp	.+12     	; 0x372 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=data;
 366:	6b bb       	out	0x1b, r22	; 27
		break;
 368:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=data;
 36a:	68 bb       	out	0x18, r22	; 24
		break;
 36c:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=data;
 36e:	65 bb       	out	0x15, r22	; 21
		break;
 370:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=data;
 372:	62 bb       	out	0x12, r22	; 18
 374:	08 95       	ret

00000376 <DIO_TOG_PIN>:
	}
}

void DIO_TOG_PIN(unsigned char port, unsigned char pin)
{
	switch (port)
 376:	84 34       	cpi	r24, 0x44	; 68
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_TOG_PIN+0x6>
 37a:	3d c0       	rjmp	.+122    	; 0x3f6 <DIO_TOG_PIN+0x80>
 37c:	85 34       	cpi	r24, 0x45	; 69
 37e:	40 f4       	brcc	.+16     	; 0x390 <DIO_TOG_PIN+0x1a>
 380:	82 34       	cpi	r24, 0x42	; 66
 382:	f9 f0       	breq	.+62     	; 0x3c2 <DIO_TOG_PIN+0x4c>
 384:	83 34       	cpi	r24, 0x43	; 67
 386:	50 f5       	brcc	.+84     	; 0x3dc <DIO_TOG_PIN+0x66>
 388:	81 34       	cpi	r24, 0x41	; 65
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_TOG_PIN+0x18>
 38c:	40 c0       	rjmp	.+128    	; 0x40e <DIO_TOG_PIN+0x98>
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <DIO_TOG_PIN+0x32>
 390:	82 36       	cpi	r24, 0x62	; 98
 392:	b9 f0       	breq	.+46     	; 0x3c2 <DIO_TOG_PIN+0x4c>
 394:	83 36       	cpi	r24, 0x63	; 99
 396:	18 f4       	brcc	.+6      	; 0x39e <DIO_TOG_PIN+0x28>
 398:	81 36       	cpi	r24, 0x61	; 97
 39a:	c9 f5       	brne	.+114    	; 0x40e <DIO_TOG_PIN+0x98>
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <DIO_TOG_PIN+0x32>
 39e:	83 36       	cpi	r24, 0x63	; 99
 3a0:	e9 f0       	breq	.+58     	; 0x3dc <DIO_TOG_PIN+0x66>
 3a2:	84 36       	cpi	r24, 0x64	; 100
 3a4:	a1 f5       	brne	.+104    	; 0x40e <DIO_TOG_PIN+0x98>
 3a6:	27 c0       	rjmp	.+78     	; 0x3f6 <DIO_TOG_PIN+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_TOG_PIN+0x40>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_TOG_PIN+0x3c>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 27       	eor	r22, r18
 3be:	6b bb       	out	0x1b, r22	; 27
		break;
 3c0:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin);
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_TOG_PIN+0x5a>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_TOG_PIN+0x56>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 27       	eor	r22, r18
 3d8:	68 bb       	out	0x18, r22	; 24
		break;
 3da:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin);
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_TOG_PIN+0x74>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_TOG_PIN+0x70>
 3ee:	ba 01       	movw	r22, r20
 3f0:	62 27       	eor	r22, r18
 3f2:	65 bb       	out	0x15, r22	; 21
		break;
 3f4:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin);
 3f6:	22 b3       	in	r18, 0x12	; 18
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	ac 01       	movw	r20, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_TOG_PIN+0x8e>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_TOG_PIN+0x8a>
 408:	ba 01       	movw	r22, r20
 40a:	62 27       	eor	r22, r18
 40c:	62 bb       	out	0x12, r22	; 18
 40e:	08 95       	ret

00000410 <DIO_TOG_PORT>:
}


void DIO_TOG_PORT(unsigned char port)
{
	switch(port)
 410:	84 34       	cpi	r24, 0x44	; 68
 412:	09 f4       	brne	.+2      	; 0x416 <DIO_TOG_PORT+0x6>
 414:	7a c0       	rjmp	.+244    	; 0x50a <DIO_TOG_PORT+0xfa>
 416:	85 34       	cpi	r24, 0x45	; 69
 418:	48 f4       	brcc	.+18     	; 0x42c <DIO_TOG_PORT+0x1c>
 41a:	82 34       	cpi	r24, 0x42	; 66
 41c:	b1 f1       	breq	.+108    	; 0x48a <DIO_TOG_PORT+0x7a>
 41e:	83 34       	cpi	r24, 0x43	; 67
 420:	08 f0       	brcs	.+2      	; 0x424 <DIO_TOG_PORT+0x14>
 422:	53 c0       	rjmp	.+166    	; 0x4ca <DIO_TOG_PORT+0xba>
 424:	81 34       	cpi	r24, 0x41	; 65
 426:	09 f0       	breq	.+2      	; 0x42a <DIO_TOG_PORT+0x1a>
 428:	8f c0       	rjmp	.+286    	; 0x548 <DIO_TOG_PORT+0x138>
 42a:	0f c0       	rjmp	.+30     	; 0x44a <DIO_TOG_PORT+0x3a>
 42c:	82 36       	cpi	r24, 0x62	; 98
 42e:	69 f1       	breq	.+90     	; 0x48a <DIO_TOG_PORT+0x7a>
 430:	83 36       	cpi	r24, 0x63	; 99
 432:	20 f4       	brcc	.+8      	; 0x43c <DIO_TOG_PORT+0x2c>
 434:	81 36       	cpi	r24, 0x61	; 97
 436:	09 f0       	breq	.+2      	; 0x43a <DIO_TOG_PORT+0x2a>
 438:	87 c0       	rjmp	.+270    	; 0x548 <DIO_TOG_PORT+0x138>
 43a:	07 c0       	rjmp	.+14     	; 0x44a <DIO_TOG_PORT+0x3a>
 43c:	83 36       	cpi	r24, 0x63	; 99
 43e:	09 f4       	brne	.+2      	; 0x442 <DIO_TOG_PORT+0x32>
 440:	44 c0       	rjmp	.+136    	; 0x4ca <DIO_TOG_PORT+0xba>
 442:	84 36       	cpi	r24, 0x64	; 100
 444:	09 f0       	breq	.+2      	; 0x448 <DIO_TOG_PORT+0x38>
 446:	80 c0       	rjmp	.+256    	; 0x548 <DIO_TOG_PORT+0x138>
 448:	60 c0       	rjmp	.+192    	; 0x50a <DIO_TOG_PORT+0xfa>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,0);
 44a:	9b b3       	in	r25, 0x1b	; 27
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	89 27       	eor	r24, r25
 450:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,1);
 452:	9b b3       	in	r25, 0x1b	; 27
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	89 27       	eor	r24, r25
 458:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,2);
 45a:	9b b3       	in	r25, 0x1b	; 27
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	89 27       	eor	r24, r25
 460:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,3);
 462:	9b b3       	in	r25, 0x1b	; 27
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	89 27       	eor	r24, r25
 468:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,4);
 46a:	9b b3       	in	r25, 0x1b	; 27
 46c:	80 e1       	ldi	r24, 0x10	; 16
 46e:	89 27       	eor	r24, r25
 470:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,5);
 472:	9b b3       	in	r25, 0x1b	; 27
 474:	80 e2       	ldi	r24, 0x20	; 32
 476:	89 27       	eor	r24, r25
 478:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,6);
 47a:	9b b3       	in	r25, 0x1b	; 27
 47c:	80 e4       	ldi	r24, 0x40	; 64
 47e:	89 27       	eor	r24, r25
 480:	8b bb       	out	0x1b, r24	; 27
		TOGGLE_BIT(PORTA,7);
 482:	8b b3       	in	r24, 0x1b	; 27
 484:	80 58       	subi	r24, 0x80	; 128
 486:	8b bb       	out	0x1b, r24	; 27
		break;
 488:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,0);
 48a:	98 b3       	in	r25, 0x18	; 24
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	89 27       	eor	r24, r25
 490:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,1);
 492:	98 b3       	in	r25, 0x18	; 24
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	89 27       	eor	r24, r25
 498:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,2);
 49a:	98 b3       	in	r25, 0x18	; 24
 49c:	84 e0       	ldi	r24, 0x04	; 4
 49e:	89 27       	eor	r24, r25
 4a0:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,3);
 4a2:	98 b3       	in	r25, 0x18	; 24
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	89 27       	eor	r24, r25
 4a8:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,4);
 4aa:	98 b3       	in	r25, 0x18	; 24
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	89 27       	eor	r24, r25
 4b0:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,5);
 4b2:	98 b3       	in	r25, 0x18	; 24
 4b4:	80 e2       	ldi	r24, 0x20	; 32
 4b6:	89 27       	eor	r24, r25
 4b8:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,6);
 4ba:	98 b3       	in	r25, 0x18	; 24
 4bc:	80 e4       	ldi	r24, 0x40	; 64
 4be:	89 27       	eor	r24, r25
 4c0:	88 bb       	out	0x18, r24	; 24
		TOGGLE_BIT(PORTB,7);
 4c2:	88 b3       	in	r24, 0x18	; 24
 4c4:	80 58       	subi	r24, 0x80	; 128
 4c6:	88 bb       	out	0x18, r24	; 24
		break;
 4c8:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,0);
 4ca:	95 b3       	in	r25, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	89 27       	eor	r24, r25
 4d0:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,1);
 4d2:	95 b3       	in	r25, 0x15	; 21
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	89 27       	eor	r24, r25
 4d8:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,2);
 4da:	95 b3       	in	r25, 0x15	; 21
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	89 27       	eor	r24, r25
 4e0:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,3);
 4e2:	95 b3       	in	r25, 0x15	; 21
 4e4:	88 e0       	ldi	r24, 0x08	; 8
 4e6:	89 27       	eor	r24, r25
 4e8:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,4);
 4ea:	95 b3       	in	r25, 0x15	; 21
 4ec:	80 e1       	ldi	r24, 0x10	; 16
 4ee:	89 27       	eor	r24, r25
 4f0:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,5);
 4f2:	95 b3       	in	r25, 0x15	; 21
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	89 27       	eor	r24, r25
 4f8:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,6);
 4fa:	95 b3       	in	r25, 0x15	; 21
 4fc:	80 e4       	ldi	r24, 0x40	; 64
 4fe:	89 27       	eor	r24, r25
 500:	85 bb       	out	0x15, r24	; 21
		TOGGLE_BIT(PORTC,7);
 502:	85 b3       	in	r24, 0x15	; 21
 504:	80 58       	subi	r24, 0x80	; 128
 506:	85 bb       	out	0x15, r24	; 21
		break;
 508:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,0);
 50a:	92 b3       	in	r25, 0x12	; 18
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	89 27       	eor	r24, r25
 510:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,1);
 512:	92 b3       	in	r25, 0x12	; 18
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	89 27       	eor	r24, r25
 518:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,2);
 51a:	92 b3       	in	r25, 0x12	; 18
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	89 27       	eor	r24, r25
 520:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,3);
 522:	92 b3       	in	r25, 0x12	; 18
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	89 27       	eor	r24, r25
 528:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,4);
 52a:	92 b3       	in	r25, 0x12	; 18
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	89 27       	eor	r24, r25
 530:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,5);
 532:	92 b3       	in	r25, 0x12	; 18
 534:	80 e2       	ldi	r24, 0x20	; 32
 536:	89 27       	eor	r24, r25
 538:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,6);
 53a:	92 b3       	in	r25, 0x12	; 18
 53c:	80 e4       	ldi	r24, 0x40	; 64
 53e:	89 27       	eor	r24, r25
 540:	82 bb       	out	0x12, r24	; 18
		TOGGLE_BIT(PORTD,7);
 542:	82 b3       	in	r24, 0x12	; 18
 544:	80 58       	subi	r24, 0x80	; 128
 546:	82 bb       	out	0x12, r24	; 18
 548:	08 95       	ret

0000054a <DIO_READ_PIN>:

unsigned char DIO_READ_PIN(unsigned char port, unsigned char pin)
{
	unsigned char data;
	
	switch(port)
 54a:	84 34       	cpi	r24, 0x44	; 68
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_READ_PIN+0x6>
 54e:	51 c0       	rjmp	.+162    	; 0x5f2 <DIO_READ_PIN+0xa8>
 550:	85 34       	cpi	r24, 0x45	; 69
 552:	40 f4       	brcc	.+16     	; 0x564 <DIO_READ_PIN+0x1a>
 554:	82 34       	cpi	r24, 0x42	; 66
 556:	39 f1       	breq	.+78     	; 0x5a6 <DIO_READ_PIN+0x5c>
 558:	83 34       	cpi	r24, 0x43	; 67
 55a:	c0 f5       	brcc	.+112    	; 0x5cc <DIO_READ_PIN+0x82>
 55c:	81 34       	cpi	r24, 0x41	; 65
 55e:	09 f0       	breq	.+2      	; 0x562 <DIO_READ_PIN+0x18>
 560:	5a c0       	rjmp	.+180    	; 0x616 <DIO_READ_PIN+0xcc>
 562:	0e c0       	rjmp	.+28     	; 0x580 <DIO_READ_PIN+0x36>
 564:	82 36       	cpi	r24, 0x62	; 98
 566:	f9 f0       	breq	.+62     	; 0x5a6 <DIO_READ_PIN+0x5c>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	20 f4       	brcc	.+8      	; 0x574 <DIO_READ_PIN+0x2a>
 56c:	81 36       	cpi	r24, 0x61	; 97
 56e:	09 f0       	breq	.+2      	; 0x572 <DIO_READ_PIN+0x28>
 570:	52 c0       	rjmp	.+164    	; 0x616 <DIO_READ_PIN+0xcc>
 572:	06 c0       	rjmp	.+12     	; 0x580 <DIO_READ_PIN+0x36>
 574:	83 36       	cpi	r24, 0x63	; 99
 576:	51 f1       	breq	.+84     	; 0x5cc <DIO_READ_PIN+0x82>
 578:	84 36       	cpi	r24, 0x64	; 100
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_READ_PIN+0x34>
 57c:	4c c0       	rjmp	.+152    	; 0x616 <DIO_READ_PIN+0xcc>
 57e:	39 c0       	rjmp	.+114    	; 0x5f2 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		data=READ_BIT(PINA,pin);
 580:	29 b3       	in	r18, 0x19	; 25
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	06 2e       	mov	r0, r22
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_READ_PIN+0x44>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_READ_PIN+0x40>
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	82 23       	and	r24, r18
 596:	93 23       	and	r25, r19
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_READ_PIN+0x54>
 59a:	95 95       	asr	r25
 59c:	87 95       	ror	r24
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_READ_PIN+0x50>
 5a2:	98 2f       	mov	r25, r24
		break;
 5a4:	38 c0       	rjmp	.+112    	; 0x616 <DIO_READ_PIN+0xcc>
		
		case 'B':
		case 'b':
		data=READ_BIT(PINB,pin);
 5a6:	26 b3       	in	r18, 0x16	; 22
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	06 2e       	mov	r0, r22
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_READ_PIN+0x6a>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_READ_PIN+0x66>
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	82 23       	and	r24, r18
 5bc:	93 23       	and	r25, r19
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_READ_PIN+0x7a>
 5c0:	95 95       	asr	r25
 5c2:	87 95       	ror	r24
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_READ_PIN+0x76>
 5c8:	98 2f       	mov	r25, r24
		break;
 5ca:	25 c0       	rjmp	.+74     	; 0x616 <DIO_READ_PIN+0xcc>
		
		case 'C':
		case 'c':
		data=READ_BIT(PINC,pin);
 5cc:	23 b3       	in	r18, 0x13	; 19
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	06 2e       	mov	r0, r22
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_READ_PIN+0x90>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_READ_PIN+0x8c>
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	82 23       	and	r24, r18
 5e2:	93 23       	and	r25, r19
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_READ_PIN+0xa0>
 5e6:	95 95       	asr	r25
 5e8:	87 95       	ror	r24
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_READ_PIN+0x9c>
 5ee:	98 2f       	mov	r25, r24
		break;
 5f0:	12 c0       	rjmp	.+36     	; 0x616 <DIO_READ_PIN+0xcc>
		
		case 'D':
		case 'd':
		data=READ_BIT(PIND,pin);
 5f2:	20 b3       	in	r18, 0x10	; 16
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	06 2e       	mov	r0, r22
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_READ_PIN+0xb6>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_READ_PIN+0xb2>
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	82 23       	and	r24, r18
 608:	93 23       	and	r25, r19
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_READ_PIN+0xc6>
 60c:	95 95       	asr	r25
 60e:	87 95       	ror	r24
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_READ_PIN+0xc2>
 614:	98 2f       	mov	r25, r24
		break;
	}
	
	return data;
}
 616:	89 2f       	mov	r24, r25
 618:	08 95       	ret

0000061a <DIO_READ_PORT>:

unsigned char DIO_READ_PORT(unsigned char port)
{
	unsigned char data;
	switch(port)
 61a:	84 34       	cpi	r24, 0x44	; 68
 61c:	d9 f0       	breq	.+54     	; 0x654 <DIO_READ_PORT+0x3a>
 61e:	85 34       	cpi	r24, 0x45	; 69
 620:	38 f4       	brcc	.+14     	; 0x630 <DIO_READ_PORT+0x16>
 622:	82 34       	cpi	r24, 0x42	; 66
 624:	99 f0       	breq	.+38     	; 0x64c <DIO_READ_PORT+0x32>
 626:	83 34       	cpi	r24, 0x43	; 67
 628:	98 f4       	brcc	.+38     	; 0x650 <DIO_READ_PORT+0x36>
 62a:	81 34       	cpi	r24, 0x41	; 65
 62c:	a1 f4       	brne	.+40     	; 0x656 <DIO_READ_PORT+0x3c>
 62e:	0c c0       	rjmp	.+24     	; 0x648 <DIO_READ_PORT+0x2e>
 630:	82 36       	cpi	r24, 0x62	; 98
 632:	61 f0       	breq	.+24     	; 0x64c <DIO_READ_PORT+0x32>
 634:	83 36       	cpi	r24, 0x63	; 99
 636:	18 f4       	brcc	.+6      	; 0x63e <DIO_READ_PORT+0x24>
 638:	81 36       	cpi	r24, 0x61	; 97
 63a:	69 f4       	brne	.+26     	; 0x656 <DIO_READ_PORT+0x3c>
 63c:	05 c0       	rjmp	.+10     	; 0x648 <DIO_READ_PORT+0x2e>
 63e:	83 36       	cpi	r24, 0x63	; 99
 640:	39 f0       	breq	.+14     	; 0x650 <DIO_READ_PORT+0x36>
 642:	84 36       	cpi	r24, 0x64	; 100
 644:	41 f4       	brne	.+16     	; 0x656 <DIO_READ_PORT+0x3c>
 646:	06 c0       	rjmp	.+12     	; 0x654 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		data=PINA;
 648:	99 b3       	in	r25, 0x19	; 25
		break;
 64a:	05 c0       	rjmp	.+10     	; 0x656 <DIO_READ_PORT+0x3c>
		
		case 'B':
		case 'b':
		data=PINB;
 64c:	96 b3       	in	r25, 0x16	; 22
		break;
 64e:	03 c0       	rjmp	.+6      	; 0x656 <DIO_READ_PORT+0x3c>
		
		case 'C':
		case 'c':
		data=PINC;
 650:	93 b3       	in	r25, 0x13	; 19
		break;
 652:	01 c0       	rjmp	.+2      	; 0x656 <DIO_READ_PORT+0x3c>
		
		case 'D':
		case 'd':
		data=PIND;
 654:	90 b3       	in	r25, 0x10	; 16
		break;
		
	}
	
	return data;
}
 656:	89 2f       	mov	r24, r25
 658:	08 95       	ret

0000065a <DIO_ACTIVE_INTERNAL_PULL_UP>:

void DIO_ACTIVE_INTERNAL_PULL_UP(unsigned char port, unsigned char pin)
{
	switch(port)
 65a:	84 34       	cpi	r24, 0x44	; 68
 65c:	09 f4       	brne	.+2      	; 0x660 <DIO_ACTIVE_INTERNAL_PULL_UP+0x6>
 65e:	3d c0       	rjmp	.+122    	; 0x6da <DIO_ACTIVE_INTERNAL_PULL_UP+0x80>
 660:	85 34       	cpi	r24, 0x45	; 69
 662:	40 f4       	brcc	.+16     	; 0x674 <DIO_ACTIVE_INTERNAL_PULL_UP+0x1a>
 664:	82 34       	cpi	r24, 0x42	; 66
 666:	f9 f0       	breq	.+62     	; 0x6a6 <DIO_ACTIVE_INTERNAL_PULL_UP+0x4c>
 668:	83 34       	cpi	r24, 0x43	; 67
 66a:	50 f5       	brcc	.+84     	; 0x6c0 <DIO_ACTIVE_INTERNAL_PULL_UP+0x66>
 66c:	81 34       	cpi	r24, 0x41	; 65
 66e:	09 f0       	breq	.+2      	; 0x672 <DIO_ACTIVE_INTERNAL_PULL_UP+0x18>
 670:	40 c0       	rjmp	.+128    	; 0x6f2 <DIO_ACTIVE_INTERNAL_PULL_UP+0x98>
 672:	0c c0       	rjmp	.+24     	; 0x68c <DIO_ACTIVE_INTERNAL_PULL_UP+0x32>
 674:	82 36       	cpi	r24, 0x62	; 98
 676:	b9 f0       	breq	.+46     	; 0x6a6 <DIO_ACTIVE_INTERNAL_PULL_UP+0x4c>
 678:	83 36       	cpi	r24, 0x63	; 99
 67a:	18 f4       	brcc	.+6      	; 0x682 <DIO_ACTIVE_INTERNAL_PULL_UP+0x28>
 67c:	81 36       	cpi	r24, 0x61	; 97
 67e:	c9 f5       	brne	.+114    	; 0x6f2 <DIO_ACTIVE_INTERNAL_PULL_UP+0x98>
 680:	05 c0       	rjmp	.+10     	; 0x68c <DIO_ACTIVE_INTERNAL_PULL_UP+0x32>
 682:	83 36       	cpi	r24, 0x63	; 99
 684:	e9 f0       	breq	.+58     	; 0x6c0 <DIO_ACTIVE_INTERNAL_PULL_UP+0x66>
 686:	84 36       	cpi	r24, 0x64	; 100
 688:	a1 f5       	brne	.+104    	; 0x6f2 <DIO_ACTIVE_INTERNAL_PULL_UP+0x98>
 68a:	27 c0       	rjmp	.+78     	; 0x6da <DIO_ACTIVE_INTERNAL_PULL_UP+0x80>
	{
		case 'A':
		case 'a':
		SET_BIT(PORTA,pin);
 68c:	2b b3       	in	r18, 0x1b	; 27
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	ac 01       	movw	r20, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_ACTIVE_INTERNAL_PULL_UP+0x40>
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_ACTIVE_INTERNAL_PULL_UP+0x3c>
 69e:	ba 01       	movw	r22, r20
 6a0:	62 2b       	or	r22, r18
 6a2:	6b bb       	out	0x1b, r22	; 27
		break;
 6a4:	08 95       	ret
		
		case 'B':
		case 'b':
		SET_BIT(PORTB,pin);
 6a6:	28 b3       	in	r18, 0x18	; 24
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	ac 01       	movw	r20, r24
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_ACTIVE_INTERNAL_PULL_UP+0x5a>
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_ACTIVE_INTERNAL_PULL_UP+0x56>
 6b8:	ba 01       	movw	r22, r20
 6ba:	62 2b       	or	r22, r18
 6bc:	68 bb       	out	0x18, r22	; 24
		break;
 6be:	08 95       	ret
		
		case 'C':
		case 'c':
		SET_BIT(PORTC,pin);
 6c0:	25 b3       	in	r18, 0x15	; 21
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	ac 01       	movw	r20, r24
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_ACTIVE_INTERNAL_PULL_UP+0x74>
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_ACTIVE_INTERNAL_PULL_UP+0x70>
 6d2:	ba 01       	movw	r22, r20
 6d4:	62 2b       	or	r22, r18
 6d6:	65 bb       	out	0x15, r22	; 21
		break;
 6d8:	08 95       	ret
		
		case 'D':
		case 'd':
		SET_BIT(PORTD,pin);
 6da:	22 b3       	in	r18, 0x12	; 18
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	ac 01       	movw	r20, r24
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_ACTIVE_INTERNAL_PULL_UP+0x8e>
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_ACTIVE_INTERNAL_PULL_UP+0x8a>
 6ec:	ba 01       	movw	r22, r20
 6ee:	62 2b       	or	r22, r18
 6f0:	62 bb       	out	0x12, r22	; 18
 6f2:	08 95       	ret

000006f4 <DIO_WRITE_LOW_NIBBLE>:
	}
}

void DIO_WRITE_LOW_NIBBLE(unsigned char port, unsigned char data)
{
	data&=0x0f;
 6f4:	6f 70       	andi	r22, 0x0F	; 15
	
	switch(port)
 6f6:	84 34       	cpi	r24, 0x44	; 68
 6f8:	51 f1       	breq	.+84     	; 0x74e <DIO_WRITE_LOW_NIBBLE+0x5a>
 6fa:	85 34       	cpi	r24, 0x45	; 69
 6fc:	38 f4       	brcc	.+14     	; 0x70c <DIO_WRITE_LOW_NIBBLE+0x18>
 6fe:	82 34       	cpi	r24, 0x42	; 66
 700:	c1 f0       	breq	.+48     	; 0x732 <DIO_WRITE_LOW_NIBBLE+0x3e>
 702:	83 34       	cpi	r24, 0x43	; 67
 704:	e8 f4       	brcc	.+58     	; 0x740 <DIO_WRITE_LOW_NIBBLE+0x4c>
 706:	81 34       	cpi	r24, 0x41	; 65
 708:	41 f5       	brne	.+80     	; 0x75a <DIO_WRITE_LOW_NIBBLE+0x66>
 70a:	0c c0       	rjmp	.+24     	; 0x724 <DIO_WRITE_LOW_NIBBLE+0x30>
 70c:	82 36       	cpi	r24, 0x62	; 98
 70e:	89 f0       	breq	.+34     	; 0x732 <DIO_WRITE_LOW_NIBBLE+0x3e>
 710:	83 36       	cpi	r24, 0x63	; 99
 712:	18 f4       	brcc	.+6      	; 0x71a <DIO_WRITE_LOW_NIBBLE+0x26>
 714:	81 36       	cpi	r24, 0x61	; 97
 716:	09 f5       	brne	.+66     	; 0x75a <DIO_WRITE_LOW_NIBBLE+0x66>
 718:	05 c0       	rjmp	.+10     	; 0x724 <DIO_WRITE_LOW_NIBBLE+0x30>
 71a:	83 36       	cpi	r24, 0x63	; 99
 71c:	89 f0       	breq	.+34     	; 0x740 <DIO_WRITE_LOW_NIBBLE+0x4c>
 71e:	84 36       	cpi	r24, 0x64	; 100
 720:	e1 f4       	brne	.+56     	; 0x75a <DIO_WRITE_LOW_NIBBLE+0x66>
 722:	15 c0       	rjmp	.+42     	; 0x74e <DIO_WRITE_LOW_NIBBLE+0x5a>
	{
		case 'A':
		case 'a':
		PORTA&=0xf0;
 724:	8b b3       	in	r24, 0x1b	; 27
 726:	80 7f       	andi	r24, 0xF0	; 240
 728:	8b bb       	out	0x1b, r24	; 27
		PORTA|=data;
 72a:	8b b3       	in	r24, 0x1b	; 27
 72c:	68 2b       	or	r22, r24
 72e:	6b bb       	out	0x1b, r22	; 27
		break;
 730:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0xf0;
 732:	88 b3       	in	r24, 0x18	; 24
 734:	80 7f       	andi	r24, 0xF0	; 240
 736:	88 bb       	out	0x18, r24	; 24
		PORTB|=data;
 738:	88 b3       	in	r24, 0x18	; 24
 73a:	68 2b       	or	r22, r24
 73c:	68 bb       	out	0x18, r22	; 24
		break;
 73e:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0xf0;
 740:	85 b3       	in	r24, 0x15	; 21
 742:	80 7f       	andi	r24, 0xF0	; 240
 744:	85 bb       	out	0x15, r24	; 21
		PORTC|=data;
 746:	85 b3       	in	r24, 0x15	; 21
 748:	68 2b       	or	r22, r24
 74a:	65 bb       	out	0x15, r22	; 21
		break;
 74c:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0xf0;
 74e:	82 b3       	in	r24, 0x12	; 18
 750:	80 7f       	andi	r24, 0xF0	; 240
 752:	82 bb       	out	0x12, r24	; 18
		PORTD|=data;
 754:	82 b3       	in	r24, 0x12	; 18
 756:	68 2b       	or	r22, r24
 758:	62 bb       	out	0x12, r22	; 18
 75a:	08 95       	ret

0000075c <DIO_WRITE_HIGH_NIBBLE>:
	}
}

void DIO_WRITE_HIGH_NIBBLE(unsigned char port, unsigned char data)
{
	data<<=4;
 75c:	62 95       	swap	r22
 75e:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(port)
 760:	84 34       	cpi	r24, 0x44	; 68
 762:	51 f1       	breq	.+84     	; 0x7b8 <DIO_WRITE_HIGH_NIBBLE+0x5c>
 764:	85 34       	cpi	r24, 0x45	; 69
 766:	38 f4       	brcc	.+14     	; 0x776 <DIO_WRITE_HIGH_NIBBLE+0x1a>
 768:	82 34       	cpi	r24, 0x42	; 66
 76a:	c1 f0       	breq	.+48     	; 0x79c <DIO_WRITE_HIGH_NIBBLE+0x40>
 76c:	83 34       	cpi	r24, 0x43	; 67
 76e:	e8 f4       	brcc	.+58     	; 0x7aa <DIO_WRITE_HIGH_NIBBLE+0x4e>
 770:	81 34       	cpi	r24, 0x41	; 65
 772:	41 f5       	brne	.+80     	; 0x7c4 <DIO_WRITE_HIGH_NIBBLE+0x68>
 774:	0c c0       	rjmp	.+24     	; 0x78e <DIO_WRITE_HIGH_NIBBLE+0x32>
 776:	82 36       	cpi	r24, 0x62	; 98
 778:	89 f0       	breq	.+34     	; 0x79c <DIO_WRITE_HIGH_NIBBLE+0x40>
 77a:	83 36       	cpi	r24, 0x63	; 99
 77c:	18 f4       	brcc	.+6      	; 0x784 <DIO_WRITE_HIGH_NIBBLE+0x28>
 77e:	81 36       	cpi	r24, 0x61	; 97
 780:	09 f5       	brne	.+66     	; 0x7c4 <DIO_WRITE_HIGH_NIBBLE+0x68>
 782:	05 c0       	rjmp	.+10     	; 0x78e <DIO_WRITE_HIGH_NIBBLE+0x32>
 784:	83 36       	cpi	r24, 0x63	; 99
 786:	89 f0       	breq	.+34     	; 0x7aa <DIO_WRITE_HIGH_NIBBLE+0x4e>
 788:	84 36       	cpi	r24, 0x64	; 100
 78a:	e1 f4       	brne	.+56     	; 0x7c4 <DIO_WRITE_HIGH_NIBBLE+0x68>
 78c:	15 c0       	rjmp	.+42     	; 0x7b8 <DIO_WRITE_HIGH_NIBBLE+0x5c>
	{
		case 'A':
		case 'a':
		PORTA&=0x0f;
 78e:	8b b3       	in	r24, 0x1b	; 27
 790:	8f 70       	andi	r24, 0x0F	; 15
 792:	8b bb       	out	0x1b, r24	; 27
		PORTA|=data;
 794:	8b b3       	in	r24, 0x1b	; 27
 796:	68 2b       	or	r22, r24
 798:	6b bb       	out	0x1b, r22	; 27
		break;
 79a:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0x0f;
 79c:	88 b3       	in	r24, 0x18	; 24
 79e:	8f 70       	andi	r24, 0x0F	; 15
 7a0:	88 bb       	out	0x18, r24	; 24
		PORTB|=data;
 7a2:	88 b3       	in	r24, 0x18	; 24
 7a4:	68 2b       	or	r22, r24
 7a6:	68 bb       	out	0x18, r22	; 24
		break;
 7a8:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0x0f;
 7aa:	85 b3       	in	r24, 0x15	; 21
 7ac:	8f 70       	andi	r24, 0x0F	; 15
 7ae:	85 bb       	out	0x15, r24	; 21
		PORTC|=data;
 7b0:	85 b3       	in	r24, 0x15	; 21
 7b2:	68 2b       	or	r22, r24
 7b4:	65 bb       	out	0x15, r22	; 21
		break;
 7b6:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0x0f;
 7b8:	82 b3       	in	r24, 0x12	; 18
 7ba:	8f 70       	andi	r24, 0x0F	; 15
 7bc:	82 bb       	out	0x12, r24	; 18
		PORTD|=data;
 7be:	82 b3       	in	r24, 0x12	; 18
 7c0:	68 2b       	or	r22, r24
 7c2:	62 bb       	out	0x12, r22	; 18
 7c4:	08 95       	ret

000007c6 <LCD_ENABLE>:
	LCD_SEND_CMD(CLEAR_SCREEN);
}

void LCD_ENABLE()
{
	DIO_WRITE_PIN(CTRL_PORT , EN , 1);
 7c6:	83 e6       	ldi	r24, 0x63	; 99
 7c8:	62 e0       	ldi	r22, 0x02	; 2
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d0:	8f e9       	ldi	r24, 0x9F	; 159
 7d2:	9f e0       	ldi	r25, 0x0F	; 15
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCD_ENABLE+0xe>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <LCD_ENABLE+0x14>
 7da:	00 00       	nop
	
	_delay_ms(2);
	
	DIO_WRITE_PIN(CTRL_PORT , EN , 0);
 7dc:	83 e6       	ldi	r24, 0x63	; 99
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
 7e6:	8f e6       	ldi	r24, 0x6F	; 111
 7e8:	97 e1       	ldi	r25, 0x17	; 23
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	f1 f7       	brne	.-4      	; 0x7ea <LCD_ENABLE+0x24>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <LCD_ENABLE+0x2a>
 7f0:	00 00       	nop
	
	_delay_ms(3);
 7f2:	08 95       	ret

000007f4 <LCD_SEND_CMD>:
	
	#endif
}

void LCD_SEND_CMD(unsigned char cmd)
{	
 7f4:	cf 93       	push	r28
 7f6:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	
	/*configure the read/write pin*/
	DIO_WRITE_PIN(DATA_PORT , RW , 0);
 7f8:	83 e4       	ldi	r24, 0x43	; 67
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	40 e0       	ldi	r20, 0x00	; 0
 7fe:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	/*WRITE MOST FOUR BIT TO COMMAND REGISTER*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , cmd>>4);
 802:	6c 2f       	mov	r22, r28
 804:	62 95       	swap	r22
 806:	6f 70       	andi	r22, 0x0F	; 15
 808:	83 e4       	ldi	r24, 0x43	; 67
 80a:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in command register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 0);
 80e:	83 e6       	ldi	r24, 0x63	; 99
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	40 e0       	ldi	r20, 0x00	; 0
 814:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 818:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_ENABLE>
	
	/*WRITE LEAST FOUR BIT TO COMMAND REGISTER*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , cmd);
 81c:	83 e4       	ldi	r24, 0x43	; 67
 81e:	6c 2f       	mov	r22, r28
 820:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in command register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 0);
 824:	83 e6       	ldi	r24, 0x63	; 99
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 82e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_ENABLE>
 832:	8f e6       	ldi	r24, 0x6F	; 111
 834:	97 e1       	ldi	r25, 0x17	; 23
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <LCD_SEND_CMD+0x42>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_SEND_CMD+0x48>
 83c:	00 00       	nop
	
	_delay_ms(3);
	
	#endif
}
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <LCD_CLEAR_SCREEN>:
	_delay_ms(3);
}

void LCD_CLEAR_SCREEN()
{
	LCD_SEND_CMD(CLEAR_SCREEN);
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
}
 848:	08 95       	ret

0000084a <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(unsigned char row , unsigned char col)
{	
	unsigned char position;
	
	if (row == 1)
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	19 f4       	brne	.+6      	; 0x854 <LCD_MOVE_CURSOR+0xa>
	{
		position = 0x80 + col -1;
 84e:	96 2f       	mov	r25, r22
 850:	91 58       	subi	r25, 0x81	; 129
 852:	15 c0       	rjmp	.+42     	; 0x87e <__stack+0x1f>
	}
	else if(row == 2)
 854:	82 30       	cpi	r24, 0x02	; 2
 856:	19 f4       	brne	.+6      	; 0x85e <LCD_MOVE_CURSOR+0x14>
	{
		position = 0xc0 + col -1;
 858:	96 2f       	mov	r25, r22
 85a:	91 54       	subi	r25, 0x41	; 65
 85c:	10 c0       	rjmp	.+32     	; 0x87e <__stack+0x1f>
	}
	else if ((row > 2)||(col > 16)||(row < 1)||(col < 1))
 85e:	83 30       	cpi	r24, 0x03	; 3
 860:	38 f4       	brcc	.+14     	; 0x870 <__stack+0x11>
 862:	61 31       	cpi	r22, 0x11	; 17
 864:	38 f4       	brcc	.+14     	; 0x874 <__stack+0x15>
 866:	88 23       	and	r24, r24
 868:	39 f0       	breq	.+14     	; 0x878 <__stack+0x19>
 86a:	66 23       	and	r22, r22
 86c:	39 f0       	breq	.+14     	; 0x87c <__stack+0x1d>
 86e:	07 c0       	rjmp	.+14     	; 0x87e <__stack+0x1f>
	{
		position = 0x80;
 870:	90 e8       	ldi	r25, 0x80	; 128
 872:	05 c0       	rjmp	.+10     	; 0x87e <__stack+0x1f>
 874:	90 e8       	ldi	r25, 0x80	; 128
 876:	03 c0       	rjmp	.+6      	; 0x87e <__stack+0x1f>
 878:	90 e8       	ldi	r25, 0x80	; 128
 87a:	01 c0       	rjmp	.+2      	; 0x87e <__stack+0x1f>
 87c:	90 e8       	ldi	r25, 0x80	; 128
	}
	
	LCD_SEND_CMD(position);
 87e:	89 2f       	mov	r24, r25
 880:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 884:	8f e6       	ldi	r24, 0x6F	; 111
 886:	97 e1       	ldi	r25, 0x17	; 23
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <__stack+0x29>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
 88e:	00 00       	nop
	
	_delay_ms(3);
}
 890:	08 95       	ret

00000892 <LCD_INIT>:
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	90 e7       	ldi	r25, 0x70	; 112
 896:	a2 e0       	ldi	r26, 0x02	; 2
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	90 40       	sbci	r25, 0x00	; 0
 89c:	a0 40       	sbci	r26, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <LCD_INIT+0x6>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <LCD_INIT+0x10>
 8a2:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(2);
	
	#elif defined FOUR_BIT_MODE
	
	DIO_SET_PIN_DIR(DATA_PORT , 4 ,1);
 8a4:	83 e4       	ldi	r24, 0x43	; 67
 8a6:	64 e0       	ldi	r22, 0x04	; 4
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 5 ,1);
 8ae:	83 e4       	ldi	r24, 0x43	; 67
 8b0:	65 e0       	ldi	r22, 0x05	; 5
 8b2:	41 e0       	ldi	r20, 0x01	; 1
 8b4:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 6 ,1);
 8b8:	83 e4       	ldi	r24, 0x43	; 67
 8ba:	66 e0       	ldi	r22, 0x06	; 6
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT , 7 ,1);
 8c2:	83 e4       	ldi	r24, 0x43	; 67
 8c4:	67 e0       	ldi	r22, 0x07	; 7
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	
	DIO_SET_PIN_DIR(CTRL_PORT , RW ,1);
 8cc:	83 e6       	ldi	r24, 0x63	; 99
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTRL_PORT , EN ,1);
 8d6:	83 e6       	ldi	r24, 0x63	; 99
 8d8:	62 e0       	ldi	r22, 0x02	; 2
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTRL_PORT , RS ,1);
 8e0:	83 e6       	ldi	r24, 0x63	; 99
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	41 e0       	ldi	r20, 0x01	; 1
 8e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	
	DIO_WRITE_PIN(CTRL_PORT , RW , 0);
 8ea:	83 e6       	ldi	r24, 0x63	; 99
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	LCD_SEND_CMD(RETURN_HOME);
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 8fa:	af ec       	ldi	r26, 0xCF	; 207
 8fc:	b7 e0       	ldi	r27, 0x07	; 7
 8fe:	11 97       	sbiw	r26, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <LCD_INIT+0x6c>
 902:	00 c0       	rjmp	.+0      	; 0x904 <LCD_INIT+0x72>
 904:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(FUNCTION_SET_TO_FOUR_BIT_MODE);
 906:	88 e2       	ldi	r24, 0x28	; 40
 908:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 90c:	8f ec       	ldi	r24, 0xCF	; 207
 90e:	97 e0       	ldi	r25, 0x07	; 7
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <LCD_INIT+0x7e>
 914:	00 c0       	rjmp	.+0      	; 0x916 <LCD_INIT+0x84>
 916:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(DISPLAY_ON_CURSOR_ON);
 918:	8e e0       	ldi	r24, 0x0E	; 14
 91a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 91e:	af ec       	ldi	r26, 0xCF	; 207
 920:	b7 e0       	ldi	r27, 0x07	; 7
 922:	11 97       	sbiw	r26, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <LCD_INIT+0x90>
 926:	00 c0       	rjmp	.+0      	; 0x928 <LCD_INIT+0x96>
 928:	00 00       	nop
	_delay_ms(1);
	
	LCD_SEND_CMD(CLEAR_SCREEN);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 930:	8f e6       	ldi	r24, 0x6F	; 111
 932:	97 e1       	ldi	r25, 0x17	; 23
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	f1 f7       	brne	.-4      	; 0x934 <LCD_INIT+0xa2>
 938:	00 c0       	rjmp	.+0      	; 0x93a <LCD_INIT+0xa8>
 93a:	00 00       	nop
	_delay_ms(3);
	
	LCD_SEND_CMD(ENTRY_MODE);
 93c:	86 e0       	ldi	r24, 0x06	; 6
 93e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
 942:	af e9       	ldi	r26, 0x9F	; 159
 944:	bf e0       	ldi	r27, 0x0F	; 15
 946:	11 97       	sbiw	r26, 0x01	; 1
 948:	f1 f7       	brne	.-4      	; 0x946 <LCD_INIT+0xb4>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_INIT+0xba>
 94c:	00 00       	nop
	_delay_ms(2);
	
	#endif
	
}
 94e:	08 95       	ret

00000950 <LCD_SEND_CHAR>:

void LCD_SEND_CHAR(unsigned char data)
{
 950:	cf 93       	push	r28
 952:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	
	/*configure read/write pin*/
	DIO_WRITE_PIN(CTRL_PORT , RW , 0);
 954:	83 e6       	ldi	r24, 0x63	; 99
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	40 e0       	ldi	r20, 0x00	; 0
 95a:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	/*WRITE MOST FOUR BITS TO DATA REGISTER FIRSTLY*/
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , data>>4);
 95e:	6c 2f       	mov	r22, r28
 960:	62 95       	swap	r22
 962:	6f 70       	andi	r22, 0x0F	; 15
 964:	83 e4       	ldi	r24, 0x43	; 67
 966:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in data register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 1);
 96a:	83 e6       	ldi	r24, 0x63	; 99
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	41 e0       	ldi	r20, 0x01	; 1
 970:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
	
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 974:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_ENABLE>
	
	/*WRITE LEAST FOUR BITS TO DATA REGISTER */
	DIO_WRITE_HIGH_NIBBLE(DATA_PORT , data);
 978:	83 e4       	ldi	r24, 0x43	; 67
 97a:	6c 2f       	mov	r22, r28
 97c:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_WRITE_HIGH_NIBBLE>
	
	/*save in data register*/
	DIO_WRITE_PIN(CTRL_PORT , RS , 1);
 980:	83 e6       	ldi	r24, 0x63	; 99
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_WRITE_PIN>
		
	/*send pulse on the enable pin*/
	LCD_ENABLE();
 98a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_ENABLE>
 98e:	8f e6       	ldi	r24, 0x6F	; 111
 990:	97 e1       	ldi	r25, 0x17	; 23
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	f1 f7       	brne	.-4      	; 0x992 <LCD_SEND_CHAR+0x42>
 996:	00 c0       	rjmp	.+0      	; 0x998 <LCD_SEND_CHAR+0x48>
 998:	00 00       	nop
	 
	 
	_delay_ms(3);
	
	#endif
}
 99a:	cf 91       	pop	r28
 99c:	08 95       	ret

0000099e <LCD_SEND_STRING>:
	
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
{	
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	ec 01       	movw	r28, r24
	while(*data != '\0')
 9a4:	88 81       	ld	r24, Y
 9a6:	88 23       	and	r24, r24
 9a8:	31 f0       	breq	.+12     	; 0x9b6 <LCD_SEND_STRING+0x18>
	_delay_ms(3);
	
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
 9aa:	21 96       	adiw	r28, 0x01	; 1
{	
	while(*data != '\0')
	{
		LCD_SEND_CHAR(*data);
 9ac:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
	#endif
}

void LCD_SEND_STRING(const unsigned char * data)
{	
	while(*data != '\0')
 9b0:	89 91       	ld	r24, Y+
 9b2:	88 23       	and	r24, r24
 9b4:	d9 f7       	brne	.-10     	; 0x9ac <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}		
	 
}
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	08 95       	ret

000009bc <main>:
#include "ADC.h"
#define STEP 0.0025

int main(void)
{	
	LCD_INIT();
 9bc:	0e 94 49 04 	call	0x892	; 0x892 <LCD_INIT>
	ADC_INIT();
 9c0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
	
	 int volt_in_mv;
	 int temp;
	
	LCD_SEND_STRING("tempreture=");
 9c4:	80 e6       	ldi	r24, 0x60	; 96
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_SEND_STRING>
		LCD_SEND_CMD(DISPLAY_ON_CURSOR_OFF);
         volt_in_mv = ADC_READ() * STEP * 1000;
		 
		 if (volt_in_mv >= 1000)
		 {
			 temp = (volt_in_mv - 1000)/10;
 9cc:	0f 2e       	mov	r0, r31
 9ce:	fa e0       	ldi	r31, 0x0A	; 10
 9d0:	ef 2e       	mov	r14, r31
 9d2:	ff 24       	eor	r15, r15
 9d4:	f0 2d       	mov	r31, r0
			 }
			 else if (temp >99)
			 {
		
				 LCD_MOVE_CURSOR(1 , 12);
				 LCD_SEND_CHAR((temp/100)+48);
 9d6:	0f 2e       	mov	r0, r31
 9d8:	f4 e6       	ldi	r31, 0x64	; 100
 9da:	af 2e       	mov	r10, r31
 9dc:	bb 24       	eor	r11, r11
 9de:	f0 2d       	mov	r31, r0
			 }
			 
		 }
		 else if (volt_in_mv < 1000)
		 {
			 temp = (1000 - volt_in_mv)/10;
 9e0:	0f 2e       	mov	r0, r31
 9e2:	f8 ee       	ldi	r31, 0xE8	; 232
 9e4:	cf 2e       	mov	r12, r31
 9e6:	f3 e0       	ldi	r31, 0x03	; 3
 9e8:	df 2e       	mov	r13, r31
 9ea:	f0 2d       	mov	r31, r0
	
	LCD_SEND_STRING("tempreture=");
	
    while(1)
    {	
		LCD_SEND_CMD(DISPLAY_ON_CURSOR_OFF);
 9ec:	8c e0       	ldi	r24, 0x0C	; 12
 9ee:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_SEND_CMD>
         volt_in_mv = ADC_READ() * STEP * 1000;
 9f2:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_READ>
 9f6:	bc 01       	movw	r22, r24
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	37 ed       	ldi	r19, 0xD7	; 215
 a04:	43 e2       	ldi	r20, 0x23	; 35
 a06:	5b e3       	ldi	r21, 0x3B	; 59
 a08:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulsf3>
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	4a e7       	ldi	r20, 0x7A	; 122
 a12:	54 e4       	ldi	r21, 0x44	; 68
 a14:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulsf3>
 a18:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fixsfsi>
 a1c:	dc 01       	movw	r26, r24
 a1e:	cb 01       	movw	r24, r22
		 
		 if (volt_in_mv >= 1000)
 a20:	23 e0       	ldi	r18, 0x03	; 3
 a22:	88 3e       	cpi	r24, 0xE8	; 232
 a24:	92 07       	cpc	r25, r18
 a26:	0c f4       	brge	.+2      	; 0xa2a <main+0x6e>
 a28:	65 c0       	rjmp	.+202    	; 0xaf4 <main+0x138>
		 {
			 temp = (volt_in_mv - 1000)/10;
 a2a:	88 5e       	subi	r24, 0xE8	; 232
 a2c:	93 40       	sbci	r25, 0x03	; 3
 a2e:	b7 01       	movw	r22, r14
 a30:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 a34:	eb 01       	movw	r28, r22
 a36:	8b 01       	movw	r16, r22
			 
			 
			 if (temp <= 9)
 a38:	6a 30       	cpi	r22, 0x0A	; 10
 a3a:	71 05       	cpc	r23, r1
 a3c:	ac f4       	brge	.+42     	; 0xa68 <main+0xac>
			 {
				 LCD_MOVE_CURSOR(1 , 12);
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	6c e0       	ldi	r22, 0x0C	; 12
 a42:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_MOVE_CURSOR>
				 LCD_SEND_CHAR(temp+48);
 a46:	8c 2f       	mov	r24, r28
 a48:	80 5d       	subi	r24, 0xD0	; 208
 a4a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0x10);
 a4e:	80 e1       	ldi	r24, 0x10	; 16
 a50:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0XDF);
 a54:	8f ed       	ldi	r24, 0xDF	; 223
 a56:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR('C');
 a5a:	83 e4       	ldi	r24, 0x43	; 67
 a5c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0x10);
 a60:	80 e1       	ldi	r24, 0x10	; 16
 a62:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
 a66:	c2 cf       	rjmp	.-124    	; 0x9ec <main+0x30>
				 
			 }
			 else if ((temp > 9)&&(temp < 100))
 a68:	2a 97       	sbiw	r28, 0x0a	; 10
 a6a:	ca 35       	cpi	r28, 0x5A	; 90
 a6c:	d1 05       	cpc	r29, r1
 a6e:	d8 f4       	brcc	.+54     	; 0xaa6 <main+0xea>
			 {
				 LCD_MOVE_CURSOR(1 , 12);
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	6c e0       	ldi	r22, 0x0C	; 12
 a74:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_MOVE_CURSOR>
				 LCD_SEND_CHAR((temp/10)+48);
 a78:	c8 01       	movw	r24, r16
 a7a:	b7 01       	movw	r22, r14
 a7c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 a80:	c8 2f       	mov	r28, r24
 a82:	86 2f       	mov	r24, r22
 a84:	80 5d       	subi	r24, 0xD0	; 208
 a86:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR((temp%10)+48);
 a8a:	8c 2f       	mov	r24, r28
 a8c:	80 5d       	subi	r24, 0xD0	; 208
 a8e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(' ');
 a92:	80 e2       	ldi	r24, 0x20	; 32
 a94:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0XDF);
 a98:	8f ed       	ldi	r24, 0xDF	; 223
 a9a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR('C');
 a9e:	83 e4       	ldi	r24, 0x43	; 67
 aa0:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
 aa4:	a3 cf       	rjmp	.-186    	; 0x9ec <main+0x30>
				 
			 }
			 else if (temp >99)
 aa6:	64 36       	cpi	r22, 0x64	; 100
 aa8:	71 05       	cpc	r23, r1
 aaa:	0c f4       	brge	.+2      	; 0xaae <main+0xf2>
 aac:	9f cf       	rjmp	.-194    	; 0x9ec <main+0x30>
			 {
		
				 LCD_MOVE_CURSOR(1 , 12);
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	6c e0       	ldi	r22, 0x0C	; 12
 ab2:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_MOVE_CURSOR>
				 LCD_SEND_CHAR((temp/100)+48);
 ab6:	c8 01       	movw	r24, r16
 ab8:	b5 01       	movw	r22, r10
 aba:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 abe:	86 2f       	mov	r24, r22
 ac0:	80 5d       	subi	r24, 0xD0	; 208
 ac2:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(((temp/10)%10)+48);
 ac6:	c8 01       	movw	r24, r16
 ac8:	b7 01       	movw	r22, r14
 aca:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 ace:	c8 2f       	mov	r28, r24
 ad0:	cb 01       	movw	r24, r22
 ad2:	b7 01       	movw	r22, r14
 ad4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 ad8:	80 5d       	subi	r24, 0xD0	; 208
 ada:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR((temp%10)+48);
 ade:	8c 2f       	mov	r24, r28
 ae0:	80 5d       	subi	r24, 0xD0	; 208
 ae2:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0XDF);
 ae6:	8f ed       	ldi	r24, 0xDF	; 223
 ae8:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR('C');
 aec:	83 e4       	ldi	r24, 0x43	; 67
 aee:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
 af2:	7c cf       	rjmp	.-264    	; 0x9ec <main+0x30>
			 }
			 
		 }
		 else if (volt_in_mv < 1000)
		 {
			 temp = (1000 - volt_in_mv)/10;
 af4:	96 01       	movw	r18, r12
 af6:	28 1b       	sub	r18, r24
 af8:	39 0b       	sbc	r19, r25
 afa:	c9 01       	movw	r24, r18
 afc:	b7 01       	movw	r22, r14
 afe:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 b02:	c6 2f       	mov	r28, r22
 b04:	06 2f       	mov	r16, r22
 b06:	17 2f       	mov	r17, r23
			 
			 if (temp <= 9)
 b08:	0a 30       	cpi	r16, 0x0A	; 10
 b0a:	11 05       	cpc	r17, r1
 b0c:	c4 f4       	brge	.+48     	; 0xb3e <main+0x182>
			 {	
				 LCD_MOVE_CURSOR(1 , 12);
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	6c e0       	ldi	r22, 0x0C	; 12
 b12:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_MOVE_CURSOR>
				 LCD_SEND_CHAR('-');
 b16:	8d e2       	ldi	r24, 0x2D	; 45
 b18:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(temp+48);
 b1c:	8c 2f       	mov	r24, r28
 b1e:	80 5d       	subi	r24, 0xD0	; 208
 b20:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0x10);
 b24:	80 e1       	ldi	r24, 0x10	; 16
 b26:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0XDF);
 b2a:	8f ed       	ldi	r24, 0xDF	; 223
 b2c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR('C');
 b30:	83 e4       	ldi	r24, 0x43	; 67
 b32:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR(0x10);
 b36:	80 e1       	ldi	r24, 0x10	; 16
 b38:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
 b3c:	57 cf       	rjmp	.-338    	; 0x9ec <main+0x30>
				 
			 }
			 else if (temp > 9)
			 {	
				 LCD_MOVE_CURSOR(1 , 12);
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	6c e0       	ldi	r22, 0x0C	; 12
 b42:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_MOVE_CURSOR>
				 LCD_SEND_CHAR('-');
 b46:	8d e2       	ldi	r24, 0x2D	; 45
 b48:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR((temp/10)+48);
 b4c:	c8 01       	movw	r24, r16
 b4e:	b7 01       	movw	r22, r14
 b50:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
 b54:	c8 2f       	mov	r28, r24
 b56:	86 2f       	mov	r24, r22
 b58:	80 5d       	subi	r24, 0xD0	; 208
 b5a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR((temp%10)+48);
 b5e:	8c 2f       	mov	r24, r28
 b60:	80 5d       	subi	r24, 0xD0	; 208
 b62:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 
				 LCD_SEND_CHAR(0XDF);
 b66:	8f ed       	ldi	r24, 0xDF	; 223
 b68:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
				 LCD_SEND_CHAR('C');
 b6c:	83 e4       	ldi	r24, 0x43	; 67
 b6e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_SEND_CHAR>
 b72:	3c cf       	rjmp	.-392    	; 0x9ec <main+0x30>

00000b74 <__fixsfsi>:
 b74:	04 d0       	rcall	.+8      	; 0xb7e <__fixunssfsi>
 b76:	68 94       	set
 b78:	b1 11       	cpse	r27, r1
 b7a:	8d c0       	rjmp	.+282    	; 0xc96 <__fp_szero>
 b7c:	08 95       	ret

00000b7e <__fixunssfsi>:
 b7e:	70 d0       	rcall	.+224    	; 0xc60 <__fp_splitA>
 b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x26>
 b82:	9f 57       	subi	r25, 0x7F	; 127
 b84:	90 f0       	brcs	.+36     	; 0xbaa <__fixunssfsi+0x2c>
 b86:	b9 2f       	mov	r27, r25
 b88:	99 27       	eor	r25, r25
 b8a:	b7 51       	subi	r27, 0x17	; 23
 b8c:	a0 f0       	brcs	.+40     	; 0xbb6 <__fixunssfsi+0x38>
 b8e:	d1 f0       	breq	.+52     	; 0xbc4 <__fixunssfsi+0x46>
 b90:	66 0f       	add	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x22>
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x12>
 b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__fixunssfsi+0x46>
 ba0:	b1 30       	cpi	r27, 0x01	; 1
 ba2:	81 f0       	breq	.+32     	; 0xbc4 <__fixunssfsi+0x46>
 ba4:	77 d0       	rcall	.+238    	; 0xc94 <__fp_zero>
 ba6:	b1 e0       	ldi	r27, 0x01	; 1
 ba8:	08 95       	ret
 baa:	74 c0       	rjmp	.+232    	; 0xc94 <__fp_zero>
 bac:	67 2f       	mov	r22, r23
 bae:	78 2f       	mov	r23, r24
 bb0:	88 27       	eor	r24, r24
 bb2:	b8 5f       	subi	r27, 0xF8	; 248
 bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x46>
 bb6:	b9 3f       	cpi	r27, 0xF9	; 249
 bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x2e>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b3 95       	inc	r27
 bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x3c>
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x56>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
 bd6:	e8 94       	clt
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
 bda:	97 fb       	bst	r25, 7
 bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
 bde:	90 95       	com	r25
 be0:	80 95       	com	r24
 be2:	70 95       	com	r23
 be4:	61 95       	neg	r22
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	99 23       	and	r25, r25
 bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
 bf0:	f9 2f       	mov	r31, r25
 bf2:	96 e9       	ldi	r25, 0x96	; 150
 bf4:	bb 27       	eor	r27, r27
 bf6:	93 95       	inc	r25
 bf8:	f6 95       	lsr	r31
 bfa:	87 95       	ror	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b7 95       	ror	r27
 c02:	f1 11       	cpse	r31, r1
 c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
 c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
 c08:	bb 0f       	add	r27, r27
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
 c0c:	60 ff       	sbrs	r22, 0
 c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
 c10:	6f 5f       	subi	r22, 0xFF	; 255
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
 c1a:	88 23       	and	r24, r24
 c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
 c1e:	96 e9       	ldi	r25, 0x96	; 150
 c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
 c22:	77 23       	and	r23, r23
 c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
 c26:	9e e8       	ldi	r25, 0x8E	; 142
 c28:	87 2f       	mov	r24, r23
 c2a:	76 2f       	mov	r23, r22
 c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
 c2e:	66 23       	and	r22, r22
 c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
 c32:	96 e8       	ldi	r25, 0x86	; 134
 c34:	86 2f       	mov	r24, r22
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
 c3c:	9a 95       	dec	r25
 c3e:	66 0f       	add	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
 c46:	88 0f       	add	r24, r24
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__fp_split3>:
 c50:	57 fd       	sbrc	r21, 7
 c52:	90 58       	subi	r25, 0x80	; 128
 c54:	44 0f       	add	r20, r20
 c56:	55 1f       	adc	r21, r21
 c58:	59 f0       	breq	.+22     	; 0xc70 <__fp_splitA+0x10>
 c5a:	5f 3f       	cpi	r21, 0xFF	; 255
 c5c:	71 f0       	breq	.+28     	; 0xc7a <__fp_splitA+0x1a>
 c5e:	47 95       	ror	r20

00000c60 <__fp_splitA>:
 c60:	88 0f       	add	r24, r24
 c62:	97 fb       	bst	r25, 7
 c64:	99 1f       	adc	r25, r25
 c66:	61 f0       	breq	.+24     	; 0xc80 <__fp_splitA+0x20>
 c68:	9f 3f       	cpi	r25, 0xFF	; 255
 c6a:	79 f0       	breq	.+30     	; 0xc8a <__fp_splitA+0x2a>
 c6c:	87 95       	ror	r24
 c6e:	08 95       	ret
 c70:	12 16       	cp	r1, r18
 c72:	13 06       	cpc	r1, r19
 c74:	14 06       	cpc	r1, r20
 c76:	55 1f       	adc	r21, r21
 c78:	f2 cf       	rjmp	.-28     	; 0xc5e <__fp_split3+0xe>
 c7a:	46 95       	lsr	r20
 c7c:	f1 df       	rcall	.-30     	; 0xc60 <__fp_splitA>
 c7e:	08 c0       	rjmp	.+16     	; 0xc90 <__fp_splitA+0x30>
 c80:	16 16       	cp	r1, r22
 c82:	17 06       	cpc	r1, r23
 c84:	18 06       	cpc	r1, r24
 c86:	99 1f       	adc	r25, r25
 c88:	f1 cf       	rjmp	.-30     	; 0xc6c <__fp_splitA+0xc>
 c8a:	86 95       	lsr	r24
 c8c:	71 05       	cpc	r23, r1
 c8e:	61 05       	cpc	r22, r1
 c90:	08 94       	sec
 c92:	08 95       	ret

00000c94 <__fp_zero>:
 c94:	e8 94       	clt

00000c96 <__fp_szero>:
 c96:	bb 27       	eor	r27, r27
 c98:	66 27       	eor	r22, r22
 c9a:	77 27       	eor	r23, r23
 c9c:	cb 01       	movw	r24, r22
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__mulsf3>:
 ca2:	0b d0       	rcall	.+22     	; 0xcba <__mulsf3x>
 ca4:	78 c0       	rjmp	.+240    	; 0xd96 <__fp_round>
 ca6:	69 d0       	rcall	.+210    	; 0xd7a <__fp_pscA>
 ca8:	28 f0       	brcs	.+10     	; 0xcb4 <__mulsf3+0x12>
 caa:	6e d0       	rcall	.+220    	; 0xd88 <__fp_pscB>
 cac:	18 f0       	brcs	.+6      	; 0xcb4 <__mulsf3+0x12>
 cae:	95 23       	and	r25, r21
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <__mulsf3+0x12>
 cb2:	5a c0       	rjmp	.+180    	; 0xd68 <__fp_inf>
 cb4:	5f c0       	rjmp	.+190    	; 0xd74 <__fp_nan>
 cb6:	11 24       	eor	r1, r1
 cb8:	ee cf       	rjmp	.-36     	; 0xc96 <__fp_szero>

00000cba <__mulsf3x>:
 cba:	ca df       	rcall	.-108    	; 0xc50 <__fp_split3>
 cbc:	a0 f3       	brcs	.-24     	; 0xca6 <__mulsf3+0x4>

00000cbe <__mulsf3_pse>:
 cbe:	95 9f       	mul	r25, r21
 cc0:	d1 f3       	breq	.-12     	; 0xcb6 <__mulsf3+0x14>
 cc2:	95 0f       	add	r25, r21
 cc4:	50 e0       	ldi	r21, 0x00	; 0
 cc6:	55 1f       	adc	r21, r21
 cc8:	62 9f       	mul	r22, r18
 cca:	f0 01       	movw	r30, r0
 ccc:	72 9f       	mul	r23, r18
 cce:	bb 27       	eor	r27, r27
 cd0:	f0 0d       	add	r31, r0
 cd2:	b1 1d       	adc	r27, r1
 cd4:	63 9f       	mul	r22, r19
 cd6:	aa 27       	eor	r26, r26
 cd8:	f0 0d       	add	r31, r0
 cda:	b1 1d       	adc	r27, r1
 cdc:	aa 1f       	adc	r26, r26
 cde:	64 9f       	mul	r22, r20
 ce0:	66 27       	eor	r22, r22
 ce2:	b0 0d       	add	r27, r0
 ce4:	a1 1d       	adc	r26, r1
 ce6:	66 1f       	adc	r22, r22
 ce8:	82 9f       	mul	r24, r18
 cea:	22 27       	eor	r18, r18
 cec:	b0 0d       	add	r27, r0
 cee:	a1 1d       	adc	r26, r1
 cf0:	62 1f       	adc	r22, r18
 cf2:	73 9f       	mul	r23, r19
 cf4:	b0 0d       	add	r27, r0
 cf6:	a1 1d       	adc	r26, r1
 cf8:	62 1f       	adc	r22, r18
 cfa:	83 9f       	mul	r24, r19
 cfc:	a0 0d       	add	r26, r0
 cfe:	61 1d       	adc	r22, r1
 d00:	22 1f       	adc	r18, r18
 d02:	74 9f       	mul	r23, r20
 d04:	33 27       	eor	r19, r19
 d06:	a0 0d       	add	r26, r0
 d08:	61 1d       	adc	r22, r1
 d0a:	23 1f       	adc	r18, r19
 d0c:	84 9f       	mul	r24, r20
 d0e:	60 0d       	add	r22, r0
 d10:	21 1d       	adc	r18, r1
 d12:	82 2f       	mov	r24, r18
 d14:	76 2f       	mov	r23, r22
 d16:	6a 2f       	mov	r22, r26
 d18:	11 24       	eor	r1, r1
 d1a:	9f 57       	subi	r25, 0x7F	; 127
 d1c:	50 40       	sbci	r21, 0x00	; 0
 d1e:	8a f0       	brmi	.+34     	; 0xd42 <__mulsf3_pse+0x84>
 d20:	e1 f0       	breq	.+56     	; 0xd5a <__mulsf3_pse+0x9c>
 d22:	88 23       	and	r24, r24
 d24:	4a f0       	brmi	.+18     	; 0xd38 <__mulsf3_pse+0x7a>
 d26:	ee 0f       	add	r30, r30
 d28:	ff 1f       	adc	r31, r31
 d2a:	bb 1f       	adc	r27, r27
 d2c:	66 1f       	adc	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	91 50       	subi	r25, 0x01	; 1
 d34:	50 40       	sbci	r21, 0x00	; 0
 d36:	a9 f7       	brne	.-22     	; 0xd22 <__mulsf3_pse+0x64>
 d38:	9e 3f       	cpi	r25, 0xFE	; 254
 d3a:	51 05       	cpc	r21, r1
 d3c:	70 f0       	brcs	.+28     	; 0xd5a <__mulsf3_pse+0x9c>
 d3e:	14 c0       	rjmp	.+40     	; 0xd68 <__fp_inf>
 d40:	aa cf       	rjmp	.-172    	; 0xc96 <__fp_szero>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	ec f3       	brlt	.-6      	; 0xd40 <__mulsf3_pse+0x82>
 d46:	98 3e       	cpi	r25, 0xE8	; 232
 d48:	dc f3       	brlt	.-10     	; 0xd40 <__mulsf3_pse+0x82>
 d4a:	86 95       	lsr	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f7 95       	ror	r31
 d54:	e7 95       	ror	r30
 d56:	9f 5f       	subi	r25, 0xFF	; 255
 d58:	c1 f7       	brne	.-16     	; 0xd4a <__mulsf3_pse+0x8c>
 d5a:	fe 2b       	or	r31, r30
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__fp_inf>:
 d68:	97 f9       	bld	r25, 7
 d6a:	9f 67       	ori	r25, 0x7F	; 127
 d6c:	80 e8       	ldi	r24, 0x80	; 128
 d6e:	70 e0       	ldi	r23, 0x00	; 0
 d70:	60 e0       	ldi	r22, 0x00	; 0
 d72:	08 95       	ret

00000d74 <__fp_nan>:
 d74:	9f ef       	ldi	r25, 0xFF	; 255
 d76:	80 ec       	ldi	r24, 0xC0	; 192
 d78:	08 95       	ret

00000d7a <__fp_pscA>:
 d7a:	00 24       	eor	r0, r0
 d7c:	0a 94       	dec	r0
 d7e:	16 16       	cp	r1, r22
 d80:	17 06       	cpc	r1, r23
 d82:	18 06       	cpc	r1, r24
 d84:	09 06       	cpc	r0, r25
 d86:	08 95       	ret

00000d88 <__fp_pscB>:
 d88:	00 24       	eor	r0, r0
 d8a:	0a 94       	dec	r0
 d8c:	12 16       	cp	r1, r18
 d8e:	13 06       	cpc	r1, r19
 d90:	14 06       	cpc	r1, r20
 d92:	05 06       	cpc	r0, r21
 d94:	08 95       	ret

00000d96 <__fp_round>:
 d96:	09 2e       	mov	r0, r25
 d98:	03 94       	inc	r0
 d9a:	00 0c       	add	r0, r0
 d9c:	11 f4       	brne	.+4      	; 0xda2 <__fp_round+0xc>
 d9e:	88 23       	and	r24, r24
 da0:	52 f0       	brmi	.+20     	; 0xdb6 <__fp_round+0x20>
 da2:	bb 0f       	add	r27, r27
 da4:	40 f4       	brcc	.+16     	; 0xdb6 <__fp_round+0x20>
 da6:	bf 2b       	or	r27, r31
 da8:	11 f4       	brne	.+4      	; 0xdae <__fp_round+0x18>
 daa:	60 ff       	sbrs	r22, 0
 dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__fp_round+0x20>
 dae:	6f 5f       	subi	r22, 0xFF	; 255
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	8f 4f       	sbci	r24, 0xFF	; 255
 db4:	9f 4f       	sbci	r25, 0xFF	; 255
 db6:	08 95       	ret

00000db8 <__divmodhi4>:
 db8:	97 fb       	bst	r25, 7
 dba:	09 2e       	mov	r0, r25
 dbc:	07 26       	eor	r0, r23
 dbe:	0a d0       	rcall	.+20     	; 0xdd4 <__divmodhi4_neg1>
 dc0:	77 fd       	sbrc	r23, 7
 dc2:	04 d0       	rcall	.+8      	; 0xdcc <__divmodhi4_neg2>
 dc4:	0c d0       	rcall	.+24     	; 0xdde <__udivmodhi4>
 dc6:	06 d0       	rcall	.+12     	; 0xdd4 <__divmodhi4_neg1>
 dc8:	00 20       	and	r0, r0
 dca:	1a f4       	brpl	.+6      	; 0xdd2 <__divmodhi4_exit>

00000dcc <__divmodhi4_neg2>:
 dcc:	70 95       	com	r23
 dce:	61 95       	neg	r22
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd2 <__divmodhi4_exit>:
 dd2:	08 95       	ret

00000dd4 <__divmodhi4_neg1>:
 dd4:	f6 f7       	brtc	.-4      	; 0xdd2 <__divmodhi4_exit>
 dd6:	90 95       	com	r25
 dd8:	81 95       	neg	r24
 dda:	9f 4f       	sbci	r25, 0xFF	; 255
 ddc:	08 95       	ret

00000dde <__udivmodhi4>:
 dde:	aa 1b       	sub	r26, r26
 de0:	bb 1b       	sub	r27, r27
 de2:	51 e1       	ldi	r21, 0x11	; 17
 de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__udivmodhi4_ep>

00000de6 <__udivmodhi4_loop>:
 de6:	aa 1f       	adc	r26, r26
 de8:	bb 1f       	adc	r27, r27
 dea:	a6 17       	cp	r26, r22
 dec:	b7 07       	cpc	r27, r23
 dee:	10 f0       	brcs	.+4      	; 0xdf4 <__udivmodhi4_ep>
 df0:	a6 1b       	sub	r26, r22
 df2:	b7 0b       	sbc	r27, r23

00000df4 <__udivmodhi4_ep>:
 df4:	88 1f       	adc	r24, r24
 df6:	99 1f       	adc	r25, r25
 df8:	5a 95       	dec	r21
 dfa:	a9 f7       	brne	.-22     	; 0xde6 <__udivmodhi4_loop>
 dfc:	80 95       	com	r24
 dfe:	90 95       	com	r25
 e00:	bc 01       	movw	r22, r24
 e02:	cd 01       	movw	r24, r26
 e04:	08 95       	ret

00000e06 <_exit>:
 e06:	f8 94       	cli

00000e08 <__stop_program>:
 e08:	ff cf       	rjmp	.-2      	; 0xe08 <__stop_program>
