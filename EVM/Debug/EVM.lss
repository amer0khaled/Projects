
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d76  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e84  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000426  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000716  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000946  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  8a:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
 */ 
#include "DIO.h"


void button_init(unsigned char port, unsigned char pin)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	d8 2f       	mov	r29, r24
  98:	c6 2f       	mov	r28, r22
	DIO_SET_PIN_DIR(port,pin,0);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_CONNECT_PULL_UP(port,pin,1);
  a0:	8d 2f       	mov	r24, r29
  a2:	6c 2f       	mov	r22, r28
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_CONNECT_PULL_UP>
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <button_read>:

unsigned char button_read(unsigned char port, unsigned char pin)
{
	return DIO_READ_PIN(port,pin);
  b0:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_READ_PIN>
  b4:	08 95       	ret

000000b6 <DIO_SET_PIN_DIR>:
#include <avr/io.h>
#include "STD_MACROS.h"

void DIO_SET_PIN_DIR(unsigned char port, unsigned char pin, unsigned char dir)
{
	switch(port)
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_SET_PIN_DIR+0x6>
  ba:	71 c0       	rjmp	.+226    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
  bc:	85 34       	cpi	r24, 0x45	; 69
  be:	48 f4       	brcc	.+18     	; 0xd2 <DIO_SET_PIN_DIR+0x1c>
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	99 f1       	breq	.+102    	; 0x12a <DIO_SET_PIN_DIR+0x74>
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	08 f0       	brcs	.+2      	; 0xca <DIO_SET_PIN_DIR+0x14>
  c8:	4d c0       	rjmp	.+154    	; 0x164 <DIO_SET_PIN_DIR+0xae>
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_SET_PIN_DIR+0x1a>
  ce:	83 c0       	rjmp	.+262    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
  d2:	82 36       	cpi	r24, 0x62	; 98
  d4:	51 f1       	breq	.+84     	; 0x12a <DIO_SET_PIN_DIR+0x74>
  d6:	83 36       	cpi	r24, 0x63	; 99
  d8:	20 f4       	brcc	.+8      	; 0xe2 <DIO_SET_PIN_DIR+0x2c>
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	09 f0       	breq	.+2      	; 0xe0 <DIO_SET_PIN_DIR+0x2a>
  de:	7b c0       	rjmp	.+246    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
  e2:	83 36       	cpi	r24, 0x63	; 99
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_SET_PIN_DIR+0x32>
  e6:	3e c0       	rjmp	.+124    	; 0x164 <DIO_SET_PIN_DIR+0xae>
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_SET_PIN_DIR+0x38>
  ec:	74 c0       	rjmp	.+232    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
  ee:	57 c0       	rjmp	.+174    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
	{
		case 'a':
		case 'A':
		if(dir==1)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	69 f4       	brne	.+26     	; 0x10e <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
  f4:	2a b3       	in	r18, 0x1a	; 26
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ac 01       	movw	r20, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SET_PIN_DIR+0x4c>
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SET_PIN_DIR+0x48>
 106:	ba 01       	movw	r22, r20
 108:	62 2b       	or	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin);
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SET_PIN_DIR+0x66>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SET_PIN_DIR+0x62>
 120:	ba 01       	movw	r22, r20
 122:	60 95       	com	r22
 124:	62 23       	and	r22, r18
 126:	6a bb       	out	0x1a, r22	; 26
 128:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(dir==1)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SET_PIN_DIR+0x86>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SET_PIN_DIR+0x82>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SET_PIN_DIR+0xa0>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SET_PIN_DIR+0x9c>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
		}
		break;

		case 'c':
		case 'C':
		if(dir==1)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SET_PIN_DIR+0xc0>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SET_PIN_DIR+0xbc>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SET_PIN_DIR+0xda>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SET_PIN_DIR+0xd6>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	64 bb       	out	0x14, r22	; 20
 19c:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(dir==1)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SET_PIN_DIR+0xfa>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SET_PIN_DIR+0xf6>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin);
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SET_PIN_DIR+0x114>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SET_PIN_DIR+0x110>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	61 bb       	out	0x11, r22	; 17
 1d6:	08 95       	ret

000001d8 <DIO_WRITE_PIN>:
	}
}

void DIO_WRITE_PIN(unsigned char port, unsigned char pin, unsigned char val)
{
	switch(port)
 1d8:	84 34       	cpi	r24, 0x44	; 68
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_WRITE_PIN+0x6>
 1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <DIO_WRITE_PIN+0xe8>
 1de:	85 34       	cpi	r24, 0x45	; 69
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <DIO_WRITE_PIN+0x1c>
 1e2:	82 34       	cpi	r24, 0x42	; 66
 1e4:	99 f1       	breq	.+102    	; 0x24c <DIO_WRITE_PIN+0x74>
 1e6:	83 34       	cpi	r24, 0x43	; 67
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_WRITE_PIN+0x14>
 1ea:	4d c0       	rjmp	.+154    	; 0x286 <DIO_WRITE_PIN+0xae>
 1ec:	81 34       	cpi	r24, 0x41	; 65
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_WRITE_PIN+0x1a>
 1f0:	83 c0       	rjmp	.+262    	; 0x2f8 <DIO_WRITE_PIN+0x120>
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <DIO_WRITE_PIN+0x3a>
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	51 f1       	breq	.+84     	; 0x24c <DIO_WRITE_PIN+0x74>
 1f8:	83 36       	cpi	r24, 0x63	; 99
 1fa:	20 f4       	brcc	.+8      	; 0x204 <DIO_WRITE_PIN+0x2c>
 1fc:	81 36       	cpi	r24, 0x61	; 97
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_WRITE_PIN+0x2a>
 200:	7b c0       	rjmp	.+246    	; 0x2f8 <DIO_WRITE_PIN+0x120>
 202:	07 c0       	rjmp	.+14     	; 0x212 <DIO_WRITE_PIN+0x3a>
 204:	83 36       	cpi	r24, 0x63	; 99
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_WRITE_PIN+0x32>
 208:	3e c0       	rjmp	.+124    	; 0x286 <DIO_WRITE_PIN+0xae>
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	09 f0       	breq	.+2      	; 0x210 <DIO_WRITE_PIN+0x38>
 20e:	74 c0       	rjmp	.+232    	; 0x2f8 <DIO_WRITE_PIN+0x120>
 210:	57 c0       	rjmp	.+174    	; 0x2c0 <DIO_WRITE_PIN+0xe8>
	{
		case 'a':
		case 'A':
		if(val==1)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	69 f4       	brne	.+26     	; 0x230 <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WRITE_PIN+0x4c>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WRITE_PIN+0x48>
 228:	ba 01       	movw	r22, r20
 22a:	62 2b       	or	r22, r18
 22c:	6b bb       	out	0x1b, r22	; 27
 22e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WRITE_PIN+0x66>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WRITE_PIN+0x62>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	6b bb       	out	0x1b, r22	; 27
 24a:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(val==1)
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	69 f4       	brne	.+26     	; 0x26a <DIO_WRITE_PIN+0x92>
		{
			SET_BIT(PORTB,pin);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	ac 01       	movw	r20, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WRITE_PIN+0x86>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WRITE_PIN+0x82>
 262:	ba 01       	movw	r22, r20
 264:	62 2b       	or	r22, r18
 266:	68 bb       	out	0x18, r22	; 24
 268:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_WRITE_PIN+0xa0>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_WRITE_PIN+0x9c>
 27c:	ba 01       	movw	r22, r20
 27e:	60 95       	com	r22
 280:	62 23       	and	r22, r18
 282:	68 bb       	out	0x18, r22	; 24
 284:	08 95       	ret
		}
		break;

		case 'c':
		case 'C':
		if(val==1)
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_WRITE_PIN+0xcc>
		{
			SET_BIT(PORTC,pin);
 28a:	25 b3       	in	r18, 0x15	; 21
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_WRITE_PIN+0xc0>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_WRITE_PIN+0xbc>
 29c:	ba 01       	movw	r22, r20
 29e:	62 2b       	or	r22, r18
 2a0:	65 bb       	out	0x15, r22	; 21
 2a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_WRITE_PIN+0xda>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_WRITE_PIN+0xd6>
 2b6:	ba 01       	movw	r22, r20
 2b8:	60 95       	com	r22
 2ba:	62 23       	and	r22, r18
 2bc:	65 bb       	out	0x15, r22	; 21
 2be:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(val==1)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	69 f4       	brne	.+26     	; 0x2de <DIO_WRITE_PIN+0x106>
		{
			SET_BIT(PORTD,pin);
 2c4:	22 b3       	in	r18, 0x12	; 18
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_WRITE_PIN+0xfa>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_WRITE_PIN+0xf6>
 2d6:	ba 01       	movw	r22, r20
 2d8:	62 2b       	or	r22, r18
 2da:	62 bb       	out	0x12, r22	; 18
 2dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2de:	22 b3       	in	r18, 0x12	; 18
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_WRITE_PIN+0x114>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_WRITE_PIN+0x110>
 2f0:	ba 01       	movw	r22, r20
 2f2:	60 95       	com	r22
 2f4:	62 23       	and	r22, r18
 2f6:	62 bb       	out	0x12, r22	; 18
 2f8:	08 95       	ret

000002fa <DIO_TOG_PIN>:
	}
}

void DIO_TOG_PIN(unsigned char port,unsigned pin)
{
	switch(port)
 2fa:	84 34       	cpi	r24, 0x44	; 68
 2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_TOG_PIN+0x6>
 2fe:	3d c0       	rjmp	.+122    	; 0x37a <DIO_TOG_PIN+0x80>
 300:	85 34       	cpi	r24, 0x45	; 69
 302:	40 f4       	brcc	.+16     	; 0x314 <DIO_TOG_PIN+0x1a>
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	f9 f0       	breq	.+62     	; 0x346 <DIO_TOG_PIN+0x4c>
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	50 f5       	brcc	.+84     	; 0x360 <DIO_TOG_PIN+0x66>
 30c:	81 34       	cpi	r24, 0x41	; 65
 30e:	09 f0       	breq	.+2      	; 0x312 <DIO_TOG_PIN+0x18>
 310:	40 c0       	rjmp	.+128    	; 0x392 <DIO_TOG_PIN+0x98>
 312:	0c c0       	rjmp	.+24     	; 0x32c <DIO_TOG_PIN+0x32>
 314:	82 36       	cpi	r24, 0x62	; 98
 316:	b9 f0       	breq	.+46     	; 0x346 <DIO_TOG_PIN+0x4c>
 318:	83 36       	cpi	r24, 0x63	; 99
 31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_TOG_PIN+0x28>
 31c:	81 36       	cpi	r24, 0x61	; 97
 31e:	c9 f5       	brne	.+114    	; 0x392 <DIO_TOG_PIN+0x98>
 320:	05 c0       	rjmp	.+10     	; 0x32c <DIO_TOG_PIN+0x32>
 322:	83 36       	cpi	r24, 0x63	; 99
 324:	e9 f0       	breq	.+58     	; 0x360 <DIO_TOG_PIN+0x66>
 326:	84 36       	cpi	r24, 0x64	; 100
 328:	a1 f5       	brne	.+104    	; 0x392 <DIO_TOG_PIN+0x98>
 32a:	27 c0       	rjmp	.+78     	; 0x37a <DIO_TOG_PIN+0x80>
	{
		case 'a':
		case 'A':
		TOG_BIT(PORTA,pin);
 32c:	2b b3       	in	r18, 0x1b	; 27
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_TOG_PIN+0x40>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_TOG_PIN+0x3c>
 33e:	ba 01       	movw	r22, r20
 340:	62 27       	eor	r22, r18
 342:	6b bb       	out	0x1b, r22	; 27
		break;
 344:	08 95       	ret

		case 'b':
		case 'B':
		TOG_BIT(PORTB,pin);
 346:	28 b3       	in	r18, 0x18	; 24
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ac 01       	movw	r20, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_TOG_PIN+0x5a>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_TOG_PIN+0x56>
 358:	ba 01       	movw	r22, r20
 35a:	62 27       	eor	r22, r18
 35c:	68 bb       	out	0x18, r22	; 24
		break;
 35e:	08 95       	ret

		case 'c':
		case 'C':
		TOG_BIT(PORTC,pin);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	ac 01       	movw	r20, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_TOG_PIN+0x74>
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_TOG_PIN+0x70>
 372:	ba 01       	movw	r22, r20
 374:	62 27       	eor	r22, r18
 376:	65 bb       	out	0x15, r22	; 21
		break;
 378:	08 95       	ret

		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_TOG_PIN+0x8e>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_TOG_PIN+0x8a>
 38c:	ba 01       	movw	r22, r20
 38e:	62 27       	eor	r22, r18
 390:	62 bb       	out	0x12, r22	; 18
 392:	08 95       	ret

00000394 <DIO_READ_PIN>:
}

unsigned char DIO_READ_PIN(unsigned char port, unsigned char pin)
{
	unsigned char result;
	switch(port)
 394:	84 34       	cpi	r24, 0x44	; 68
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_READ_PIN+0x6>
 398:	51 c0       	rjmp	.+162    	; 0x43c <DIO_READ_PIN+0xa8>
 39a:	85 34       	cpi	r24, 0x45	; 69
 39c:	40 f4       	brcc	.+16     	; 0x3ae <DIO_READ_PIN+0x1a>
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	39 f1       	breq	.+78     	; 0x3f0 <DIO_READ_PIN+0x5c>
 3a2:	83 34       	cpi	r24, 0x43	; 67
 3a4:	c0 f5       	brcc	.+112    	; 0x416 <DIO_READ_PIN+0x82>
 3a6:	81 34       	cpi	r24, 0x41	; 65
 3a8:	09 f0       	breq	.+2      	; 0x3ac <DIO_READ_PIN+0x18>
 3aa:	5a c0       	rjmp	.+180    	; 0x460 <DIO_READ_PIN+0xcc>
 3ac:	0e c0       	rjmp	.+28     	; 0x3ca <DIO_READ_PIN+0x36>
 3ae:	82 36       	cpi	r24, 0x62	; 98
 3b0:	f9 f0       	breq	.+62     	; 0x3f0 <DIO_READ_PIN+0x5c>
 3b2:	83 36       	cpi	r24, 0x63	; 99
 3b4:	20 f4       	brcc	.+8      	; 0x3be <DIO_READ_PIN+0x2a>
 3b6:	81 36       	cpi	r24, 0x61	; 97
 3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_READ_PIN+0x28>
 3ba:	52 c0       	rjmp	.+164    	; 0x460 <DIO_READ_PIN+0xcc>
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <DIO_READ_PIN+0x36>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	51 f1       	breq	.+84     	; 0x416 <DIO_READ_PIN+0x82>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_READ_PIN+0x34>
 3c6:	4c c0       	rjmp	.+152    	; 0x460 <DIO_READ_PIN+0xcc>
 3c8:	39 c0       	rjmp	.+114    	; 0x43c <DIO_READ_PIN+0xa8>
	{
		case 'a':
		case 'A':
		result=READ_BIT(PINA,pin);
 3ca:	29 b3       	in	r18, 0x19	; 25
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_READ_PIN+0x44>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_READ_PIN+0x40>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_READ_PIN+0x54>
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_READ_PIN+0x50>
 3ec:	98 2f       	mov	r25, r24
		break;
 3ee:	38 c0       	rjmp	.+112    	; 0x460 <DIO_READ_PIN+0xcc>

		case 'b':
		case 'B':
		result=READ_BIT(PINB,pin);
 3f0:	26 b3       	in	r18, 0x16	; 22
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	06 2e       	mov	r0, r22
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_READ_PIN+0x6a>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_READ_PIN+0x66>
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	82 23       	and	r24, r18
 406:	93 23       	and	r25, r19
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_READ_PIN+0x7a>
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_READ_PIN+0x76>
 412:	98 2f       	mov	r25, r24
		break;
 414:	25 c0       	rjmp	.+74     	; 0x460 <DIO_READ_PIN+0xcc>

		case 'c':
		case 'C':
		result=READ_BIT(PINC,pin);
 416:	23 b3       	in	r18, 0x13	; 19
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	06 2e       	mov	r0, r22
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_READ_PIN+0x90>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_READ_PIN+0x8c>
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	82 23       	and	r24, r18
 42c:	93 23       	and	r25, r19
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_READ_PIN+0xa0>
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_READ_PIN+0x9c>
 438:	98 2f       	mov	r25, r24
		break;
 43a:	12 c0       	rjmp	.+36     	; 0x460 <DIO_READ_PIN+0xcc>

		case 'd':
		case 'D':
		result=READ_BIT(PIND,pin);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	06 2e       	mov	r0, r22
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_READ_PIN+0xb6>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_READ_PIN+0xb2>
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	82 23       	and	r24, r18
 452:	93 23       	and	r25, r19
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_READ_PIN+0xc6>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_READ_PIN+0xc2>
 45e:	98 2f       	mov	r25, r24
		break;
	}

	return result;
}
 460:	89 2f       	mov	r24, r25
 462:	08 95       	ret

00000464 <DIO_SET_PORT_DIR>:

void DIO_SET_PORT_DIR(unsigned char port, unsigned char dir)
{
	switch(port)
 464:	84 34       	cpi	r24, 0x44	; 68
 466:	d9 f0       	breq	.+54     	; 0x49e <DIO_SET_PORT_DIR+0x3a>
 468:	85 34       	cpi	r24, 0x45	; 69
 46a:	38 f4       	brcc	.+14     	; 0x47a <DIO_SET_PORT_DIR+0x16>
 46c:	82 34       	cpi	r24, 0x42	; 66
 46e:	99 f0       	breq	.+38     	; 0x496 <DIO_SET_PORT_DIR+0x32>
 470:	83 34       	cpi	r24, 0x43	; 67
 472:	98 f4       	brcc	.+38     	; 0x49a <DIO_SET_PORT_DIR+0x36>
 474:	81 34       	cpi	r24, 0x41	; 65
 476:	a1 f4       	brne	.+40     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
 478:	0c c0       	rjmp	.+24     	; 0x492 <DIO_SET_PORT_DIR+0x2e>
 47a:	82 36       	cpi	r24, 0x62	; 98
 47c:	61 f0       	breq	.+24     	; 0x496 <DIO_SET_PORT_DIR+0x32>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	18 f4       	brcc	.+6      	; 0x488 <DIO_SET_PORT_DIR+0x24>
 482:	81 36       	cpi	r24, 0x61	; 97
 484:	69 f4       	brne	.+26     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
 486:	05 c0       	rjmp	.+10     	; 0x492 <DIO_SET_PORT_DIR+0x2e>
 488:	83 36       	cpi	r24, 0x63	; 99
 48a:	39 f0       	breq	.+14     	; 0x49a <DIO_SET_PORT_DIR+0x36>
 48c:	84 36       	cpi	r24, 0x64	; 100
 48e:	41 f4       	brne	.+16     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
 490:	06 c0       	rjmp	.+12     	; 0x49e <DIO_SET_PORT_DIR+0x3a>
	{
		case 'a':
		case 'A':
		DDRA=dir;
 492:	6a bb       	out	0x1a, r22	; 26
		break;
 494:	08 95       	ret

		case 'b':
		case 'B':
		DDRB=dir;
 496:	67 bb       	out	0x17, r22	; 23
		break;
 498:	08 95       	ret

		case 'c':
		case 'C':
		DDRC=dir;
 49a:	64 bb       	out	0x14, r22	; 20
		break;
 49c:	08 95       	ret

		case 'd':
		case 'D':
		DDRD=dir;
 49e:	61 bb       	out	0x11, r22	; 17
 4a0:	08 95       	ret

000004a2 <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char port, unsigned char val)
{
	switch(port)
 4a2:	84 34       	cpi	r24, 0x44	; 68
 4a4:	d9 f0       	breq	.+54     	; 0x4dc <DIO_WRITE_PORT+0x3a>
 4a6:	85 34       	cpi	r24, 0x45	; 69
 4a8:	38 f4       	brcc	.+14     	; 0x4b8 <DIO_WRITE_PORT+0x16>
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <DIO_WRITE_PORT+0x32>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	98 f4       	brcc	.+38     	; 0x4d8 <DIO_WRITE_PORT+0x36>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	a1 f4       	brne	.+40     	; 0x4de <DIO_WRITE_PORT+0x3c>
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <DIO_WRITE_PORT+0x2e>
 4b8:	82 36       	cpi	r24, 0x62	; 98
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <DIO_WRITE_PORT+0x32>
 4bc:	83 36       	cpi	r24, 0x63	; 99
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <DIO_WRITE_PORT+0x24>
 4c0:	81 36       	cpi	r24, 0x61	; 97
 4c2:	69 f4       	brne	.+26     	; 0x4de <DIO_WRITE_PORT+0x3c>
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <DIO_WRITE_PORT+0x2e>
 4c6:	83 36       	cpi	r24, 0x63	; 99
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <DIO_WRITE_PORT+0x36>
 4ca:	84 36       	cpi	r24, 0x64	; 100
 4cc:	41 f4       	brne	.+16     	; 0x4de <DIO_WRITE_PORT+0x3c>
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <DIO_WRITE_PORT+0x3a>
	{
		case 'a':
		case 'A':
		PORTA=val;
 4d0:	6b bb       	out	0x1b, r22	; 27
		break;
 4d2:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=val;
 4d4:	68 bb       	out	0x18, r22	; 24
		break;
 4d6:	08 95       	ret

		case 'c':
		case 'C':
		PORTC=val;
 4d8:	65 bb       	out	0x15, r22	; 21
		break;
 4da:	08 95       	ret

		case 'd':
		case 'D':
		PORTD=val;
 4dc:	62 bb       	out	0x12, r22	; 18
 4de:	08 95       	ret

000004e0 <DIO_READ_PORT>:
}

unsigned char DIO_READ_PORT(unsigned char port)
{
	unsigned char result;
	switch(port)
 4e0:	84 34       	cpi	r24, 0x44	; 68
 4e2:	d9 f0       	breq	.+54     	; 0x51a <DIO_READ_PORT+0x3a>
 4e4:	85 34       	cpi	r24, 0x45	; 69
 4e6:	38 f4       	brcc	.+14     	; 0x4f6 <DIO_READ_PORT+0x16>
 4e8:	82 34       	cpi	r24, 0x42	; 66
 4ea:	99 f0       	breq	.+38     	; 0x512 <DIO_READ_PORT+0x32>
 4ec:	83 34       	cpi	r24, 0x43	; 67
 4ee:	98 f4       	brcc	.+38     	; 0x516 <DIO_READ_PORT+0x36>
 4f0:	81 34       	cpi	r24, 0x41	; 65
 4f2:	a1 f4       	brne	.+40     	; 0x51c <DIO_READ_PORT+0x3c>
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <DIO_READ_PORT+0x2e>
 4f6:	82 36       	cpi	r24, 0x62	; 98
 4f8:	61 f0       	breq	.+24     	; 0x512 <DIO_READ_PORT+0x32>
 4fa:	83 36       	cpi	r24, 0x63	; 99
 4fc:	18 f4       	brcc	.+6      	; 0x504 <DIO_READ_PORT+0x24>
 4fe:	81 36       	cpi	r24, 0x61	; 97
 500:	69 f4       	brne	.+26     	; 0x51c <DIO_READ_PORT+0x3c>
 502:	05 c0       	rjmp	.+10     	; 0x50e <DIO_READ_PORT+0x2e>
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	39 f0       	breq	.+14     	; 0x516 <DIO_READ_PORT+0x36>
 508:	84 36       	cpi	r24, 0x64	; 100
 50a:	41 f4       	brne	.+16     	; 0x51c <DIO_READ_PORT+0x3c>
 50c:	06 c0       	rjmp	.+12     	; 0x51a <DIO_READ_PORT+0x3a>
	{
		case 'a':
		case 'A':
		result=PINA;
 50e:	99 b3       	in	r25, 0x19	; 25
		break;
 510:	05 c0       	rjmp	.+10     	; 0x51c <DIO_READ_PORT+0x3c>

		case 'b':
		case 'B':
		result=PINB;
 512:	96 b3       	in	r25, 0x16	; 22
		break;
 514:	03 c0       	rjmp	.+6      	; 0x51c <DIO_READ_PORT+0x3c>

		case 'c':
		case 'C':
		result=PINC;
 516:	93 b3       	in	r25, 0x13	; 19
		break;
 518:	01 c0       	rjmp	.+2      	; 0x51c <DIO_READ_PORT+0x3c>

		case 'd':
		case 'D':
		result=PIND;
 51a:	90 b3       	in	r25, 0x10	; 16
		break;

	}

	return result;
}
 51c:	89 2f       	mov	r24, r25
 51e:	08 95       	ret

00000520 <DIO_TOG_PORT>:

void DIO_TOG_PORT(unsigned char port)
{
	switch(port)
 520:	84 34       	cpi	r24, 0x44	; 68
 522:	09 f1       	breq	.+66     	; 0x566 <DIO_TOG_PORT+0x46>
 524:	85 34       	cpi	r24, 0x45	; 69
 526:	38 f4       	brcc	.+14     	; 0x536 <DIO_TOG_PORT+0x16>
 528:	82 34       	cpi	r24, 0x42	; 66
 52a:	a9 f0       	breq	.+42     	; 0x556 <DIO_TOG_PORT+0x36>
 52c:	83 34       	cpi	r24, 0x43	; 67
 52e:	b8 f4       	brcc	.+46     	; 0x55e <DIO_TOG_PORT+0x3e>
 530:	81 34       	cpi	r24, 0x41	; 65
 532:	e1 f4       	brne	.+56     	; 0x56c <DIO_TOG_PORT+0x4c>
 534:	0c c0       	rjmp	.+24     	; 0x54e <DIO_TOG_PORT+0x2e>
 536:	82 36       	cpi	r24, 0x62	; 98
 538:	71 f0       	breq	.+28     	; 0x556 <DIO_TOG_PORT+0x36>
 53a:	83 36       	cpi	r24, 0x63	; 99
 53c:	18 f4       	brcc	.+6      	; 0x544 <DIO_TOG_PORT+0x24>
 53e:	81 36       	cpi	r24, 0x61	; 97
 540:	a9 f4       	brne	.+42     	; 0x56c <DIO_TOG_PORT+0x4c>
 542:	05 c0       	rjmp	.+10     	; 0x54e <DIO_TOG_PORT+0x2e>
 544:	83 36       	cpi	r24, 0x63	; 99
 546:	59 f0       	breq	.+22     	; 0x55e <DIO_TOG_PORT+0x3e>
 548:	84 36       	cpi	r24, 0x64	; 100
 54a:	81 f4       	brne	.+32     	; 0x56c <DIO_TOG_PORT+0x4c>
 54c:	0c c0       	rjmp	.+24     	; 0x566 <DIO_TOG_PORT+0x46>
	{
		case 'a':
		case 'A':
		PORTA=~PORTA;
 54e:	8b b3       	in	r24, 0x1b	; 27
 550:	80 95       	com	r24
 552:	8b bb       	out	0x1b, r24	; 27
		break;
 554:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=~PORTB;
 556:	88 b3       	in	r24, 0x18	; 24
 558:	80 95       	com	r24
 55a:	88 bb       	out	0x18, r24	; 24
		break;
 55c:	08 95       	ret

		case 'c':
		case 'C':
		PORTC=~PORTC;
 55e:	85 b3       	in	r24, 0x15	; 21
 560:	80 95       	com	r24
 562:	85 bb       	out	0x15, r24	; 21
		break;
 564:	08 95       	ret

		case 'D':
		case 'd':
		PORTD=~PORTD;
 566:	82 b3       	in	r24, 0x12	; 18
 568:	80 95       	com	r24
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	08 95       	ret

0000056e <DIO_CONNECT_PULL_UP>:
}


void DIO_CONNECT_PULL_UP(unsigned char port, unsigned char pin, unsigned char val)
{
    switch(port)
 56e:	84 34       	cpi	r24, 0x44	; 68
 570:	09 f4       	brne	.+2      	; 0x574 <DIO_CONNECT_PULL_UP+0x6>
 572:	71 c0       	rjmp	.+226    	; 0x656 <DIO_CONNECT_PULL_UP+0xe8>
 574:	85 34       	cpi	r24, 0x45	; 69
 576:	48 f4       	brcc	.+18     	; 0x58a <DIO_CONNECT_PULL_UP+0x1c>
 578:	82 34       	cpi	r24, 0x42	; 66
 57a:	99 f1       	breq	.+102    	; 0x5e2 <DIO_CONNECT_PULL_UP+0x74>
 57c:	83 34       	cpi	r24, 0x43	; 67
 57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_CONNECT_PULL_UP+0x14>
 580:	4d c0       	rjmp	.+154    	; 0x61c <DIO_CONNECT_PULL_UP+0xae>
 582:	81 34       	cpi	r24, 0x41	; 65
 584:	09 f0       	breq	.+2      	; 0x588 <DIO_CONNECT_PULL_UP+0x1a>
 586:	83 c0       	rjmp	.+262    	; 0x68e <DIO_CONNECT_PULL_UP+0x120>
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <DIO_CONNECT_PULL_UP+0x3a>
 58a:	82 36       	cpi	r24, 0x62	; 98
 58c:	51 f1       	breq	.+84     	; 0x5e2 <DIO_CONNECT_PULL_UP+0x74>
 58e:	83 36       	cpi	r24, 0x63	; 99
 590:	20 f4       	brcc	.+8      	; 0x59a <DIO_CONNECT_PULL_UP+0x2c>
 592:	81 36       	cpi	r24, 0x61	; 97
 594:	09 f0       	breq	.+2      	; 0x598 <DIO_CONNECT_PULL_UP+0x2a>
 596:	7b c0       	rjmp	.+246    	; 0x68e <DIO_CONNECT_PULL_UP+0x120>
 598:	07 c0       	rjmp	.+14     	; 0x5a8 <DIO_CONNECT_PULL_UP+0x3a>
 59a:	83 36       	cpi	r24, 0x63	; 99
 59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_CONNECT_PULL_UP+0x32>
 59e:	3e c0       	rjmp	.+124    	; 0x61c <DIO_CONNECT_PULL_UP+0xae>
 5a0:	84 36       	cpi	r24, 0x64	; 100
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_CONNECT_PULL_UP+0x38>
 5a4:	74 c0       	rjmp	.+232    	; 0x68e <DIO_CONNECT_PULL_UP+0x120>
 5a6:	57 c0       	rjmp	.+174    	; 0x656 <DIO_CONNECT_PULL_UP+0xe8>
    {
        case 'a':
		case 'A':
		if(val==1)
 5a8:	41 30       	cpi	r20, 0x01	; 1
 5aa:	69 f4       	brne	.+26     	; 0x5c6 <DIO_CONNECT_PULL_UP+0x58>
		{
			SET_BIT(PORTA,pin);
 5ac:	2b b3       	in	r18, 0x1b	; 27
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	ac 01       	movw	r20, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_CONNECT_PULL_UP+0x4c>
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_CONNECT_PULL_UP+0x48>
 5be:	ba 01       	movw	r22, r20
 5c0:	62 2b       	or	r22, r18
 5c2:	6b bb       	out	0x1b, r22	; 27
 5c4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 5c6:	2b b3       	in	r18, 0x1b	; 27
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	ac 01       	movw	r20, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_CONNECT_PULL_UP+0x66>
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_CONNECT_PULL_UP+0x62>
 5d8:	ba 01       	movw	r22, r20
 5da:	60 95       	com	r22
 5dc:	62 23       	and	r22, r18
 5de:	6b bb       	out	0x1b, r22	; 27
 5e0:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(val==1)
 5e2:	41 30       	cpi	r20, 0x01	; 1
 5e4:	69 f4       	brne	.+26     	; 0x600 <DIO_CONNECT_PULL_UP+0x92>
		{
			SET_BIT(PORTB,pin);
 5e6:	28 b3       	in	r18, 0x18	; 24
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	ac 01       	movw	r20, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_CONNECT_PULL_UP+0x86>
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_CONNECT_PULL_UP+0x82>
 5f8:	ba 01       	movw	r22, r20
 5fa:	62 2b       	or	r22, r18
 5fc:	68 bb       	out	0x18, r22	; 24
 5fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 600:	28 b3       	in	r18, 0x18	; 24
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	ac 01       	movw	r20, r24
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_CONNECT_PULL_UP+0xa0>
 60a:	44 0f       	add	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_CONNECT_PULL_UP+0x9c>
 612:	ba 01       	movw	r22, r20
 614:	60 95       	com	r22
 616:	62 23       	and	r22, r18
 618:	68 bb       	out	0x18, r22	; 24
 61a:	08 95       	ret
		}
		break;

		case 'c':
		case 'C':
		if(val==1)
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	69 f4       	brne	.+26     	; 0x63a <DIO_CONNECT_PULL_UP+0xcc>
		{
			SET_BIT(PORTC,pin);
 620:	25 b3       	in	r18, 0x15	; 21
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	ac 01       	movw	r20, r24
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_CONNECT_PULL_UP+0xc0>
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_CONNECT_PULL_UP+0xbc>
 632:	ba 01       	movw	r22, r20
 634:	62 2b       	or	r22, r18
 636:	65 bb       	out	0x15, r22	; 21
 638:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 63a:	25 b3       	in	r18, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	ac 01       	movw	r20, r24
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_CONNECT_PULL_UP+0xda>
 644:	44 0f       	add	r20, r20
 646:	55 1f       	adc	r21, r21
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_CONNECT_PULL_UP+0xd6>
 64c:	ba 01       	movw	r22, r20
 64e:	60 95       	com	r22
 650:	62 23       	and	r22, r18
 652:	65 bb       	out	0x15, r22	; 21
 654:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(val==1)
 656:	41 30       	cpi	r20, 0x01	; 1
 658:	69 f4       	brne	.+26     	; 0x674 <DIO_CONNECT_PULL_UP+0x106>
		{
			SET_BIT(PORTD,pin);
 65a:	22 b3       	in	r18, 0x12	; 18
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	ac 01       	movw	r20, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_CONNECT_PULL_UP+0xfa>
 664:	44 0f       	add	r20, r20
 666:	55 1f       	adc	r21, r21
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_CONNECT_PULL_UP+0xf6>
 66c:	ba 01       	movw	r22, r20
 66e:	62 2b       	or	r22, r18
 670:	62 bb       	out	0x12, r22	; 18
 672:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 674:	22 b3       	in	r18, 0x12	; 18
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	ac 01       	movw	r20, r24
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_CONNECT_PULL_UP+0x114>
 67e:	44 0f       	add	r20, r20
 680:	55 1f       	adc	r21, r21
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_CONNECT_PULL_UP+0x110>
 686:	ba 01       	movw	r22, r20
 688:	60 95       	com	r22
 68a:	62 23       	and	r22, r18
 68c:	62 bb       	out	0x12, r22	; 18
 68e:	08 95       	ret

00000690 <DIO_write_low_nibble>:



void DIO_write_low_nibble(unsigned char port,unsigned val)
{
    val=val&0x0f;
 690:	6f 70       	andi	r22, 0x0F	; 15
 692:	70 70       	andi	r23, 0x00	; 0

	switch(port)
 694:	84 34       	cpi	r24, 0x44	; 68
 696:	51 f1       	breq	.+84     	; 0x6ec <DIO_write_low_nibble+0x5c>
 698:	85 34       	cpi	r24, 0x45	; 69
 69a:	38 f4       	brcc	.+14     	; 0x6aa <DIO_write_low_nibble+0x1a>
 69c:	82 34       	cpi	r24, 0x42	; 66
 69e:	c1 f0       	breq	.+48     	; 0x6d0 <DIO_write_low_nibble+0x40>
 6a0:	83 34       	cpi	r24, 0x43	; 67
 6a2:	e8 f4       	brcc	.+58     	; 0x6de <DIO_write_low_nibble+0x4e>
 6a4:	81 34       	cpi	r24, 0x41	; 65
 6a6:	41 f5       	brne	.+80     	; 0x6f8 <DIO_write_low_nibble+0x68>
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <DIO_write_low_nibble+0x32>
 6aa:	82 36       	cpi	r24, 0x62	; 98
 6ac:	89 f0       	breq	.+34     	; 0x6d0 <DIO_write_low_nibble+0x40>
 6ae:	83 36       	cpi	r24, 0x63	; 99
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <DIO_write_low_nibble+0x28>
 6b2:	81 36       	cpi	r24, 0x61	; 97
 6b4:	09 f5       	brne	.+66     	; 0x6f8 <DIO_write_low_nibble+0x68>
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <DIO_write_low_nibble+0x32>
 6b8:	83 36       	cpi	r24, 0x63	; 99
 6ba:	89 f0       	breq	.+34     	; 0x6de <DIO_write_low_nibble+0x4e>
 6bc:	84 36       	cpi	r24, 0x64	; 100
 6be:	e1 f4       	brne	.+56     	; 0x6f8 <DIO_write_low_nibble+0x68>
 6c0:	15 c0       	rjmp	.+42     	; 0x6ec <DIO_write_low_nibble+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA&0xf0;
 6c2:	8b b3       	in	r24, 0x1b	; 27
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	68 2b       	or	r22, r24
 6cc:	6b bb       	out	0x1b, r22	; 27
		break;
 6ce:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=PORTB&0xf0;
 6d0:	88 b3       	in	r24, 0x18	; 24
 6d2:	80 7f       	andi	r24, 0xF0	; 240
 6d4:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	68 2b       	or	r22, r24
 6da:	68 bb       	out	0x18, r22	; 24
		break;
 6dc:	08 95       	ret

		case 'c':
		case 'C':
		PORTC=PORTC&0xf0;
 6de:	85 b3       	in	r24, 0x15	; 21
 6e0:	80 7f       	andi	r24, 0xF0	; 240
 6e2:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 6e4:	85 b3       	in	r24, 0x15	; 21
 6e6:	68 2b       	or	r22, r24
 6e8:	65 bb       	out	0x15, r22	; 21
		break;
 6ea:	08 95       	ret

		case 'D':
		case 'd':
		PORTD=PORTD&0xf0;
 6ec:	82 b3       	in	r24, 0x12	; 18
 6ee:	80 7f       	andi	r24, 0xF0	; 240
 6f0:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 6f2:	82 b3       	in	r24, 0x12	; 18
 6f4:	68 2b       	or	r22, r24
 6f6:	62 bb       	out	0x12, r22	; 18
 6f8:	08 95       	ret

000006fa <DIO_write_HIGH_nibble>:
	}
}

void DIO_write_HIGH_nibble(unsigned char port, unsigned char val)
{
    val=(val<<4);
 6fa:	62 95       	swap	r22
 6fc:	60 7f       	andi	r22, 0xF0	; 240

    switch(port)
 6fe:	84 34       	cpi	r24, 0x44	; 68
 700:	51 f1       	breq	.+84     	; 0x756 <DIO_write_HIGH_nibble+0x5c>
 702:	85 34       	cpi	r24, 0x45	; 69
 704:	38 f4       	brcc	.+14     	; 0x714 <DIO_write_HIGH_nibble+0x1a>
 706:	82 34       	cpi	r24, 0x42	; 66
 708:	c1 f0       	breq	.+48     	; 0x73a <DIO_write_HIGH_nibble+0x40>
 70a:	83 34       	cpi	r24, 0x43	; 67
 70c:	e8 f4       	brcc	.+58     	; 0x748 <DIO_write_HIGH_nibble+0x4e>
 70e:	81 34       	cpi	r24, 0x41	; 65
 710:	41 f5       	brne	.+80     	; 0x762 <DIO_write_HIGH_nibble+0x68>
 712:	0c c0       	rjmp	.+24     	; 0x72c <DIO_write_HIGH_nibble+0x32>
 714:	82 36       	cpi	r24, 0x62	; 98
 716:	89 f0       	breq	.+34     	; 0x73a <DIO_write_HIGH_nibble+0x40>
 718:	83 36       	cpi	r24, 0x63	; 99
 71a:	18 f4       	brcc	.+6      	; 0x722 <DIO_write_HIGH_nibble+0x28>
 71c:	81 36       	cpi	r24, 0x61	; 97
 71e:	09 f5       	brne	.+66     	; 0x762 <DIO_write_HIGH_nibble+0x68>
 720:	05 c0       	rjmp	.+10     	; 0x72c <DIO_write_HIGH_nibble+0x32>
 722:	83 36       	cpi	r24, 0x63	; 99
 724:	89 f0       	breq	.+34     	; 0x748 <DIO_write_HIGH_nibble+0x4e>
 726:	84 36       	cpi	r24, 0x64	; 100
 728:	e1 f4       	brne	.+56     	; 0x762 <DIO_write_HIGH_nibble+0x68>
 72a:	15 c0       	rjmp	.+42     	; 0x756 <DIO_write_HIGH_nibble+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA&0x0f;
 72c:	8b b3       	in	r24, 0x1b	; 27
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 732:	8b b3       	in	r24, 0x1b	; 27
 734:	68 2b       	or	r22, r24
 736:	6b bb       	out	0x1b, r22	; 27
		break;
 738:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=PORTB&0x0f;
 73a:	88 b3       	in	r24, 0x18	; 24
 73c:	8f 70       	andi	r24, 0x0F	; 15
 73e:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 740:	88 b3       	in	r24, 0x18	; 24
 742:	68 2b       	or	r22, r24
 744:	68 bb       	out	0x18, r22	; 24
		break;
 746:	08 95       	ret

		case 'c':
		case 'C':
		PORTC=PORTC&0x0f;
 748:	85 b3       	in	r24, 0x15	; 21
 74a:	8f 70       	andi	r24, 0x0F	; 15
 74c:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 74e:	85 b3       	in	r24, 0x15	; 21
 750:	68 2b       	or	r22, r24
 752:	65 bb       	out	0x15, r22	; 21
		break;
 754:	08 95       	ret

		case 'D':
		case 'd':
		PORTD=PORTD&0x0f;
 756:	82 b3       	in	r24, 0x12	; 18
 758:	8f 70       	andi	r24, 0x0F	; 15
 75a:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 75c:	82 b3       	in	r24, 0x12	; 18
 75e:	68 2b       	or	r22, r24
 760:	62 bb       	out	0x12, r22	; 18
 762:	08 95       	ret

00000764 <main>:
	button_init('d',6);
	button_init('d',7);
	
	unsigned short a=0,b=0,c=0,d=0; //as counters for 4 candidates
	
	LCD_SEND_STRING("A=0");
 764:	0f 2e       	mov	r0, r31
 766:	f0 e6       	ldi	r31, 0x60	; 96
 768:	4f 2e       	mov	r4, r31
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	5f 2e       	mov	r5, r31
 76e:	f0 2d       	mov	r31, r0
	LCD_MOVE_CURSOR(1,12);
	LCD_SEND_STRING("B=0");
 770:	0f 2e       	mov	r0, r31
 772:	f4 e6       	ldi	r31, 0x64	; 100
 774:	2f 2e       	mov	r2, r31
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	3f 2e       	mov	r3, r31
 77a:	f0 2d       	mov	r31, r0
	button_init('d',4);
	button_init('d',5);
	button_init('d',6);
	button_init('d',7);
	
	unsigned short a=0,b=0,c=0,d=0; //as counters for 4 candidates
 77c:	cc 24       	eor	r12, r12
 77e:	dd 24       	eor	r13, r13
				LCD_SEND_CHAR((a%10)+48);
			}
			else if ((a<1000)&&(a>99))
			{
				LCD_SEND_CHAR((a/100)+48);
				LCD_SEND_CHAR(((a/10)%10)+48);
 780:	0f 2e       	mov	r0, r31
 782:	fa e0       	ldi	r31, 0x0A	; 10
 784:	6f 2e       	mov	r6, r31
 786:	77 24       	eor	r7, r7
 788:	f0 2d       	mov	r31, r0

int main(void)
{	
	 /*lcd 4 bit initialization*/
	 
	 label:LCD_INIT();
 78a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <LCD_INIT>
	 
	/* button intialization and active internal pull up */
	
	button_init('d',3);
 78e:	84 e6       	ldi	r24, 0x64	; 100
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	63 e0       	ldi	r22, 0x03	; 3
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	button_init('d',4);
 79a:	84 e6       	ldi	r24, 0x64	; 100
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	64 e0       	ldi	r22, 0x04	; 4
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	button_init('d',5);
 7a6:	84 e6       	ldi	r24, 0x64	; 100
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	65 e0       	ldi	r22, 0x05	; 5
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	button_init('d',6);
 7b2:	84 e6       	ldi	r24, 0x64	; 100
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	66 e0       	ldi	r22, 0x06	; 6
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	button_init('d',7);
 7be:	84 e6       	ldi	r24, 0x64	; 100
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	67 e0       	ldi	r22, 0x07	; 7
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	
	unsigned short a=0,b=0,c=0,d=0; //as counters for 4 candidates
	
	LCD_SEND_STRING("A=0");
 7ca:	c2 01       	movw	r24, r4
 7cc:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(1,12);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	6c e0       	ldi	r22, 0x0C	; 12
 7d4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("B=0");
 7d8:	c1 01       	movw	r24, r2
 7da:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,1);
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("C=0");
 7e6:	88 e6       	ldi	r24, 0x68	; 104
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,12);
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	6c e0       	ldi	r22, 0x0C	; 12
 7f2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("D=0");
 7f6:	8c e6       	ldi	r24, 0x6C	; 108
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_SEND_STRING>
	button_init('d',4);
	button_init('d',5);
	button_init('d',6);
	button_init('d',7);
	
	unsigned short a=0,b=0,c=0,d=0; //as counters for 4 candidates
 7fe:	46 01       	movw	r8, r12
 800:	56 01       	movw	r10, r12
 802:	76 01       	movw	r14, r12
 804:	86 01       	movw	r16, r12
	LCD_SEND_STRING("D=0");
	
    while(1)
    {	
			
		if (button_read('d',4) == 0)
 806:	84 e6       	ldi	r24, 0x64	; 100
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	64 e0       	ldi	r22, 0x04	; 4
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	09 f0       	breq	.+2      	; 0x818 <main+0xb4>
 816:	54 c0       	rjmp	.+168    	; 0x8c0 <__stack+0x61>
		{
			a++;
 818:	e8 01       	movw	r28, r16
 81a:	21 96       	adiw	r28, 0x01	; 1
			
			LCD_MOVE_CURSOR(1,3);
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	63 e0       	ldi	r22, 0x03	; 3
 820:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
			if (a<10)
 824:	ca 30       	cpi	r28, 0x0A	; 10
 826:	d1 05       	cpc	r29, r1
 828:	58 f4       	brcc	.+22     	; 0x840 <main+0xdc>
			{
				LCD_SEND_CHAR(' ');
 82a:	80 e2       	ldi	r24, 0x20	; 32
 82c:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(' ');
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(a+48);
 836:	8c 2f       	mov	r24, r28
 838:	80 5d       	subi	r24, 0xD0	; 208
 83a:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 83e:	36 c0       	rjmp	.+108    	; 0x8ac <__stack+0x4d>
			}
			else if ((a<100)&&(a>9))
 840:	c8 01       	movw	r24, r16
 842:	09 97       	sbiw	r24, 0x09	; 9
 844:	8a 35       	cpi	r24, 0x5A	; 90
 846:	91 05       	cpc	r25, r1
 848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
			{	
				LCD_SEND_CHAR(' ');
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((a/10)+48);
 850:	ce 01       	movw	r24, r28
 852:	b3 01       	movw	r22, r6
 854:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 858:	08 2f       	mov	r16, r24
 85a:	86 2f       	mov	r24, r22
 85c:	80 5d       	subi	r24, 0xD0	; 208
 85e:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((a%10)+48);
 862:	80 2f       	mov	r24, r16
 864:	80 5d       	subi	r24, 0xD0	; 208
 866:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 86a:	20 c0       	rjmp	.+64     	; 0x8ac <__stack+0x4d>
			}
			else if ((a<1000)&&(a>99))
 86c:	c8 01       	movw	r24, r16
 86e:	83 56       	subi	r24, 0x63	; 99
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	23 e0       	ldi	r18, 0x03	; 3
 874:	84 38       	cpi	r24, 0x84	; 132
 876:	92 07       	cpc	r25, r18
 878:	c8 f4       	brcc	.+50     	; 0x8ac <__stack+0x4d>
			{
				LCD_SEND_CHAR((a/100)+48);
 87a:	ce 01       	movw	r24, r28
 87c:	64 e6       	ldi	r22, 0x64	; 100
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 884:	86 2f       	mov	r24, r22
 886:	80 5d       	subi	r24, 0xD0	; 208
 888:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(((a/10)%10)+48);
 88c:	ce 01       	movw	r24, r28
 88e:	b3 01       	movw	r22, r6
 890:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 894:	08 2f       	mov	r16, r24
 896:	cb 01       	movw	r24, r22
 898:	b3 01       	movw	r22, r6
 89a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 89e:	80 5d       	subi	r24, 0xD0	; 208
 8a0:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((a%10)+48);
 8a4:	80 2f       	mov	r24, r16
 8a6:	80 5d       	subi	r24, 0xD0	; 208
 8a8:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
			}
			
			while(button_read('d',4) == 0);
 8ac:	84 e6       	ldi	r24, 0x64	; 100
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	64 e0       	ldi	r22, 0x04	; 4
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	c1 f3       	breq	.-16     	; 0x8ac <__stack+0x4d>
    while(1)
    {	
			
		if (button_read('d',4) == 0)
		{
			a++;
 8bc:	8e 01       	movw	r16, r28
 8be:	a3 cf       	rjmp	.-186    	; 0x806 <main+0xa2>
			}
			
			while(button_read('d',4) == 0);
		}
		
		else if (button_read('d',5) == 0)
 8c0:	84 e6       	ldi	r24, 0x64	; 100
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	65 e0       	ldi	r22, 0x05	; 5
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__stack+0x73>
 8d0:	54 c0       	rjmp	.+168    	; 0x97a <__stack+0x11b>
		{
			b++;
 8d2:	e7 01       	movw	r28, r14
 8d4:	21 96       	adiw	r28, 0x01	; 1
			LCD_MOVE_CURSOR(1,14);
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	6e e0       	ldi	r22, 0x0E	; 14
 8da:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
			
			if (b<10)
 8de:	ca 30       	cpi	r28, 0x0A	; 10
 8e0:	d1 05       	cpc	r29, r1
 8e2:	58 f4       	brcc	.+22     	; 0x8fa <__stack+0x9b>
			{	
				LCD_SEND_CHAR(' ');
 8e4:	80 e2       	ldi	r24, 0x20	; 32
 8e6:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(' ');
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(b+48);
 8f0:	8c 2f       	mov	r24, r28
 8f2:	80 5d       	subi	r24, 0xD0	; 208
 8f4:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 8f8:	36 c0       	rjmp	.+108    	; 0x966 <__stack+0x107>
			}
			else if ((b<100)&&(b>9))
 8fa:	c7 01       	movw	r24, r14
 8fc:	09 97       	sbiw	r24, 0x09	; 9
 8fe:	8a 35       	cpi	r24, 0x5A	; 90
 900:	91 05       	cpc	r25, r1
 902:	88 f4       	brcc	.+34     	; 0x926 <__stack+0xc7>
			{	
				LCD_SEND_CHAR(' ');
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((b/10)+48);
 90a:	ce 01       	movw	r24, r28
 90c:	b3 01       	movw	r22, r6
 90e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 912:	e8 2e       	mov	r14, r24
 914:	86 2f       	mov	r24, r22
 916:	80 5d       	subi	r24, 0xD0	; 208
 918:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((b%10)+48);
 91c:	8e 2d       	mov	r24, r14
 91e:	80 5d       	subi	r24, 0xD0	; 208
 920:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 924:	20 c0       	rjmp	.+64     	; 0x966 <__stack+0x107>
			}
			else if ((b>99)&&(b<1000))
 926:	c7 01       	movw	r24, r14
 928:	83 56       	subi	r24, 0x63	; 99
 92a:	90 40       	sbci	r25, 0x00	; 0
 92c:	23 e0       	ldi	r18, 0x03	; 3
 92e:	84 38       	cpi	r24, 0x84	; 132
 930:	92 07       	cpc	r25, r18
 932:	c8 f4       	brcc	.+50     	; 0x966 <__stack+0x107>
			{
				LCD_SEND_CHAR((b/100)+48);
 934:	ce 01       	movw	r24, r28
 936:	64 e6       	ldi	r22, 0x64	; 100
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 93e:	86 2f       	mov	r24, r22
 940:	80 5d       	subi	r24, 0xD0	; 208
 942:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(((b/10)%10)+48);
 946:	ce 01       	movw	r24, r28
 948:	b3 01       	movw	r22, r6
 94a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 94e:	e8 2e       	mov	r14, r24
 950:	cb 01       	movw	r24, r22
 952:	b3 01       	movw	r22, r6
 954:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 958:	80 5d       	subi	r24, 0xD0	; 208
 95a:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((b%10)+48);
 95e:	8e 2d       	mov	r24, r14
 960:	80 5d       	subi	r24, 0xD0	; 208
 962:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
			}
			
			while(button_read('d',5) == 0);
 966:	84 e6       	ldi	r24, 0x64	; 100
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	65 e0       	ldi	r22, 0x05	; 5
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	c1 f3       	breq	.-16     	; 0x966 <__stack+0x107>
			while(button_read('d',4) == 0);
		}
		
		else if (button_read('d',5) == 0)
		{
			b++;
 976:	7e 01       	movw	r14, r28
 978:	46 cf       	rjmp	.-372    	; 0x806 <main+0xa2>
			}
			
			while(button_read('d',5) == 0);
		}
		
		else if(button_read('d',6) == 0)
 97a:	84 e6       	ldi	r24, 0x64	; 100
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	66 e0       	ldi	r22, 0x06	; 6
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	09 f0       	breq	.+2      	; 0x98c <__stack+0x12d>
 98a:	54 c0       	rjmp	.+168    	; 0xa34 <__stack+0x1d5>
		{
			c++;
 98c:	e5 01       	movw	r28, r10
 98e:	21 96       	adiw	r28, 0x01	; 1
			LCD_MOVE_CURSOR(2,3);
 990:	82 e0       	ldi	r24, 0x02	; 2
 992:	63 e0       	ldi	r22, 0x03	; 3
 994:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
			
			if (c<10)
 998:	ca 30       	cpi	r28, 0x0A	; 10
 99a:	d1 05       	cpc	r29, r1
 99c:	58 f4       	brcc	.+22     	; 0x9b4 <__stack+0x155>
			{	
				LCD_SEND_CHAR(' ');
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(' ');
 9a4:	80 e2       	ldi	r24, 0x20	; 32
 9a6:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(c+48);
 9aa:	8c 2f       	mov	r24, r28
 9ac:	80 5d       	subi	r24, 0xD0	; 208
 9ae:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 9b2:	36 c0       	rjmp	.+108    	; 0xa20 <__stack+0x1c1>
			}
			else if ((c<100)&&(c>9))
 9b4:	c5 01       	movw	r24, r10
 9b6:	09 97       	sbiw	r24, 0x09	; 9
 9b8:	8a 35       	cpi	r24, 0x5A	; 90
 9ba:	91 05       	cpc	r25, r1
 9bc:	88 f4       	brcc	.+34     	; 0x9e0 <__stack+0x181>
			{	
				LCD_SEND_CHAR(' ');
 9be:	80 e2       	ldi	r24, 0x20	; 32
 9c0:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((c/10)+48);
 9c4:	ce 01       	movw	r24, r28
 9c6:	b3 01       	movw	r22, r6
 9c8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 9cc:	a8 2e       	mov	r10, r24
 9ce:	86 2f       	mov	r24, r22
 9d0:	80 5d       	subi	r24, 0xD0	; 208
 9d2:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((c%10)+48);
 9d6:	8a 2d       	mov	r24, r10
 9d8:	80 5d       	subi	r24, 0xD0	; 208
 9da:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 9de:	20 c0       	rjmp	.+64     	; 0xa20 <__stack+0x1c1>
			}
			else if ((c>99)&&(c<1000))
 9e0:	c5 01       	movw	r24, r10
 9e2:	83 56       	subi	r24, 0x63	; 99
 9e4:	90 40       	sbci	r25, 0x00	; 0
 9e6:	23 e0       	ldi	r18, 0x03	; 3
 9e8:	84 38       	cpi	r24, 0x84	; 132
 9ea:	92 07       	cpc	r25, r18
 9ec:	c8 f4       	brcc	.+50     	; 0xa20 <__stack+0x1c1>
			{
				LCD_SEND_CHAR((c/100)+48);
 9ee:	ce 01       	movw	r24, r28
 9f0:	64 e6       	ldi	r22, 0x64	; 100
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 9f8:	86 2f       	mov	r24, r22
 9fa:	80 5d       	subi	r24, 0xD0	; 208
 9fc:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(((c/10)%10)+48);
 a00:	ce 01       	movw	r24, r28
 a02:	b3 01       	movw	r22, r6
 a04:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 a08:	a8 2e       	mov	r10, r24
 a0a:	cb 01       	movw	r24, r22
 a0c:	b3 01       	movw	r22, r6
 a0e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 a12:	80 5d       	subi	r24, 0xD0	; 208
 a14:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((c%10)+48);
 a18:	8a 2d       	mov	r24, r10
 a1a:	80 5d       	subi	r24, 0xD0	; 208
 a1c:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
			}
			
			while(button_read('d',6) == 0);
 a20:	84 e6       	ldi	r24, 0x64	; 100
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	66 e0       	ldi	r22, 0x06	; 6
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 a2c:	00 97       	sbiw	r24, 0x00	; 0
 a2e:	c1 f3       	breq	.-16     	; 0xa20 <__stack+0x1c1>
			while(button_read('d',5) == 0);
		}
		
		else if(button_read('d',6) == 0)
		{
			c++;
 a30:	5e 01       	movw	r10, r28
 a32:	e9 ce       	rjmp	.-558    	; 0x806 <main+0xa2>
			}
			
			while(button_read('d',6) == 0);
		}
		
		else if (button_read('d',7) == 0)
 a34:	84 e6       	ldi	r24, 0x64	; 100
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	67 e0       	ldi	r22, 0x07	; 7
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 a40:	00 97       	sbiw	r24, 0x00	; 0
 a42:	09 f0       	breq	.+2      	; 0xa46 <__stack+0x1e7>
 a44:	54 c0       	rjmp	.+168    	; 0xaee <__stack+0x28f>
		{
			d++;
 a46:	e4 01       	movw	r28, r8
 a48:	21 96       	adiw	r28, 0x01	; 1
			LCD_MOVE_CURSOR(2,14);
 a4a:	82 e0       	ldi	r24, 0x02	; 2
 a4c:	6e e0       	ldi	r22, 0x0E	; 14
 a4e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_MOVE_CURSOR>
			
			if (d<10)
 a52:	ca 30       	cpi	r28, 0x0A	; 10
 a54:	d1 05       	cpc	r29, r1
 a56:	58 f4       	brcc	.+22     	; 0xa6e <__stack+0x20f>
			{	
				LCD_SEND_CHAR(' ');
 a58:	80 e2       	ldi	r24, 0x20	; 32
 a5a:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(' ');
 a5e:	80 e2       	ldi	r24, 0x20	; 32
 a60:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(d+48);
 a64:	8c 2f       	mov	r24, r28
 a66:	80 5d       	subi	r24, 0xD0	; 208
 a68:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 a6c:	36 c0       	rjmp	.+108    	; 0xada <__stack+0x27b>
			}
			else if ((d<100)&&(d>9))
 a6e:	c4 01       	movw	r24, r8
 a70:	09 97       	sbiw	r24, 0x09	; 9
 a72:	8a 35       	cpi	r24, 0x5A	; 90
 a74:	91 05       	cpc	r25, r1
 a76:	88 f4       	brcc	.+34     	; 0xa9a <__stack+0x23b>
			{	
				LCD_SEND_CHAR(' ');
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((d/10)+48);
 a7e:	ce 01       	movw	r24, r28
 a80:	b3 01       	movw	r22, r6
 a82:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 a86:	88 2e       	mov	r8, r24
 a88:	86 2f       	mov	r24, r22
 a8a:	80 5d       	subi	r24, 0xD0	; 208
 a8c:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((d%10)+48);
 a90:	88 2d       	mov	r24, r8
 a92:	80 5d       	subi	r24, 0xD0	; 208
 a94:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
 a98:	20 c0       	rjmp	.+64     	; 0xada <__stack+0x27b>
			}
			else if ((d>99)&&(d<1000))
 a9a:	c4 01       	movw	r24, r8
 a9c:	83 56       	subi	r24, 0x63	; 99
 a9e:	90 40       	sbci	r25, 0x00	; 0
 aa0:	23 e0       	ldi	r18, 0x03	; 3
 aa2:	84 38       	cpi	r24, 0x84	; 132
 aa4:	92 07       	cpc	r25, r18
 aa6:	c8 f4       	brcc	.+50     	; 0xada <__stack+0x27b>
			{
				LCD_SEND_CHAR((d/100)+48);
 aa8:	ce 01       	movw	r24, r28
 aaa:	64 e6       	ldi	r22, 0x64	; 100
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 ab2:	86 2f       	mov	r24, r22
 ab4:	80 5d       	subi	r24, 0xD0	; 208
 ab6:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR(((d/10)%10)+48);
 aba:	ce 01       	movw	r24, r28
 abc:	b3 01       	movw	r22, r6
 abe:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 ac2:	88 2e       	mov	r8, r24
 ac4:	cb 01       	movw	r24, r22
 ac6:	b3 01       	movw	r22, r6
 ac8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__udivmodhi4>
 acc:	80 5d       	subi	r24, 0xD0	; 208
 ace:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
				LCD_SEND_CHAR((d%10)+48);
 ad2:	88 2d       	mov	r24, r8
 ad4:	80 5d       	subi	r24, 0xD0	; 208
 ad6:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
			}
			
			while(button_read('d',7) == 0);
 ada:	84 e6       	ldi	r24, 0x64	; 100
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	67 e0       	ldi	r22, 0x07	; 7
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	c1 f3       	breq	.-16     	; 0xada <__stack+0x27b>
			while(button_read('d',6) == 0);
		}
		
		else if (button_read('d',7) == 0)
		{
			d++;
 aea:	4e 01       	movw	r8, r28
 aec:	8c ce       	rjmp	.-744    	; 0x806 <main+0xa2>
			}
			
			while(button_read('d',7) == 0);
		}
		
		else if (button_read('d',3) == 0)
 aee:	84 e6       	ldi	r24, 0x64	; 100
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	63 e0       	ldi	r22, 0x03	; 3
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	0e 94 58 00 	call	0xb0	; 0xb0 <button_read>
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	09 f4       	brne	.+2      	; 0xb00 <__stack+0x2a1>
 afe:	45 ce       	rjmp	.-886    	; 0x78a <main+0x26>
 b00:	82 ce       	rjmp	.-764    	; 0x806 <main+0xa2>

00000b02 <LCD_ENABLE>:
}


void LCD_ENABLE(void)
{
	DIO_WRITE_PIN(CTR_PORT,EN,1);
 b02:	83 e6       	ldi	r24, 0x63	; 99
 b04:	61 e0       	ldi	r22, 0x01	; 1
 b06:	41 e0       	ldi	r20, 0x01	; 1
 b08:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b0c:	8f e9       	ldi	r24, 0x9F	; 159
 b0e:	9f e0       	ldi	r25, 0x0F	; 15
 b10:	01 97       	sbiw	r24, 0x01	; 1
 b12:	f1 f7       	brne	.-4      	; 0xb10 <LCD_ENABLE+0xe>
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <LCD_ENABLE+0x14>
 b16:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE_PIN(CTR_PORT,EN,0);
 b18:	83 e6       	ldi	r24, 0x63	; 99
 b1a:	61 e0       	ldi	r22, 0x01	; 1
 b1c:	40 e0       	ldi	r20, 0x00	; 0
 b1e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
 b22:	8f e9       	ldi	r24, 0x9F	; 159
 b24:	9f e0       	ldi	r25, 0x0F	; 15
 b26:	01 97       	sbiw	r24, 0x01	; 1
 b28:	f1 f7       	brne	.-4      	; 0xb26 <LCD_ENABLE+0x24>
 b2a:	00 c0       	rjmp	.+0      	; 0xb2c <LCD_ENABLE+0x2a>
 b2c:	00 00       	nop
	_delay_ms(2);
}
 b2e:	08 95       	ret

00000b30 <LCD_SEND_CHAR>:


void LCD_SEND_CHAR(unsigned char data)
{	
 b30:	cf 93       	push	r28
 b32:	c8 2f       	mov	r28, r24
	DIO_WRITE_PIN(CTR_PORT,RS,1);
	LCD_ENABLE();

	#elif defined FOUR_BIT_MODE
	
	DIO_WRITE_PIN(CTR_PORT,RW,0);
 b34:	83 e6       	ldi	r24, 0x63	; 99
 b36:	62 e0       	ldi	r22, 0x02	; 2
 b38:	40 e0       	ldi	r20, 0x00	; 0
 b3a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	
	DIO_write_HIGH_nibble(DATA_PORT,data>>4);
 b3e:	6c 2f       	mov	r22, r28
 b40:	62 95       	swap	r22
 b42:	6f 70       	andi	r22, 0x0F	; 15
 b44:	83 e6       	ldi	r24, 0x63	; 99
 b46:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_write_HIGH_nibble>
	DIO_WRITE_PIN(CTR_PORT,RS,1);
 b4a:	83 e6       	ldi	r24, 0x63	; 99
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	41 e0       	ldi	r20, 0x01	; 1
 b50:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	LCD_ENABLE();
 b54:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_ENABLE>
	
	DIO_write_HIGH_nibble(DATA_PORT,data);
 b58:	83 e6       	ldi	r24, 0x63	; 99
 b5a:	6c 2f       	mov	r22, r28
 b5c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_write_HIGH_nibble>
	DIO_SET_PIN_DIR(CTR_PORT,RS,1);
 b60:	83 e6       	ldi	r24, 0x63	; 99
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	41 e0       	ldi	r20, 0x01	; 1
 b66:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	LCD_ENABLE();
 b6a:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_ENABLE>
 b6e:	8f ec       	ldi	r24, 0xCF	; 207
 b70:	97 e0       	ldi	r25, 0x07	; 7
 b72:	01 97       	sbiw	r24, 0x01	; 1
 b74:	f1 f7       	brne	.-4      	; 0xb72 <LCD_SEND_CHAR+0x42>
 b76:	00 c0       	rjmp	.+0      	; 0xb78 <LCD_SEND_CHAR+0x48>
 b78:	00 00       	nop
	#endif
	
	_delay_ms(1);

}
 b7a:	cf 91       	pop	r28
 b7c:	08 95       	ret

00000b7e <LCD_SEND_CMD>:


void LCD_SEND_CMD(unsigned char cmd)
{	
 b7e:	cf 93       	push	r28
 b80:	c8 2f       	mov	r28, r24
	LCD_ENABLE();
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE

	DIO_SET_PIN_DIR(CTR_PORT,RW,0);
 b82:	83 e6       	ldi	r24, 0x63	; 99
 b84:	62 e0       	ldi	r22, 0x02	; 2
 b86:	40 e0       	ldi	r20, 0x00	; 0
 b88:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_write_HIGH_nibble(DATA_PORT,cmd>>4);
 b8c:	6c 2f       	mov	r22, r28
 b8e:	62 95       	swap	r22
 b90:	6f 70       	andi	r22, 0x0F	; 15
 b92:	83 e6       	ldi	r24, 0x63	; 99
 b94:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_write_HIGH_nibble>
	DIO_WRITE_PIN(CTR_PORT,RS,0);
 b98:	83 e6       	ldi	r24, 0x63	; 99
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	LCD_ENABLE();
 ba2:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_ENABLE>
	
	DIO_write_HIGH_nibble(DATA_PORT,cmd);
 ba6:	83 e6       	ldi	r24, 0x63	; 99
 ba8:	6c 2f       	mov	r22, r28
 baa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_write_HIGH_nibble>
	DIO_WRITE_PIN(CTR_PORT,RS,0);
 bae:	83 e6       	ldi	r24, 0x63	; 99
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	40 e0       	ldi	r20, 0x00	; 0
 bb4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	LCD_ENABLE();
 bb8:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_ENABLE>
 bbc:	8f ec       	ldi	r24, 0xCF	; 207
 bbe:	97 e0       	ldi	r25, 0x07	; 7
 bc0:	01 97       	sbiw	r24, 0x01	; 1
 bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCD_SEND_CMD+0x42>
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCD_SEND_CMD+0x48>
 bc6:	00 00       	nop
	
	_delay_ms(1);
	#endif
}
 bc8:	cf 91       	pop	r28
 bca:	08 95       	ret

00000bcc <LCD_INIT>:
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	90 e7       	ldi	r25, 0x70	; 112
 bd0:	a2 e0       	ldi	r26, 0x02	; 2
 bd2:	81 50       	subi	r24, 0x01	; 1
 bd4:	90 40       	sbci	r25, 0x00	; 0
 bd6:	a0 40       	sbci	r26, 0x00	; 0
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <LCD_INIT+0x6>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <LCD_INIT+0x10>
 bdc:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	
	DIO_SET_PIN_DIR(DATA_PORT,4,1);
 bde:	83 e6       	ldi	r24, 0x63	; 99
 be0:	64 e0       	ldi	r22, 0x04	; 4
 be2:	41 e0       	ldi	r20, 0x01	; 1
 be4:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT,5,1);
 be8:	83 e6       	ldi	r24, 0x63	; 99
 bea:	65 e0       	ldi	r22, 0x05	; 5
 bec:	41 e0       	ldi	r20, 0x01	; 1
 bee:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT,6,1);
 bf2:	83 e6       	ldi	r24, 0x63	; 99
 bf4:	66 e0       	ldi	r22, 0x06	; 6
 bf6:	41 e0       	ldi	r20, 0x01	; 1
 bf8:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DATA_PORT,7,1);
 bfc:	83 e6       	ldi	r24, 0x63	; 99
 bfe:	67 e0       	ldi	r22, 0x07	; 7
 c00:	41 e0       	ldi	r20, 0x01	; 1
 c02:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	
	DIO_SET_PIN_DIR(CTR_PORT,EN,1);
 c06:	83 e6       	ldi	r24, 0x63	; 99
 c08:	61 e0       	ldi	r22, 0x01	; 1
 c0a:	41 e0       	ldi	r20, 0x01	; 1
 c0c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTR_PORT,RW,1);
 c10:	83 e6       	ldi	r24, 0x63	; 99
 c12:	62 e0       	ldi	r22, 0x02	; 2
 c14:	41 e0       	ldi	r20, 0x01	; 1
 c16:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(CTR_PORT,RS,1);
 c1a:	83 e6       	ldi	r24, 0x63	; 99
 c1c:	60 e0       	ldi	r22, 0x00	; 0
 c1e:	41 e0       	ldi	r20, 0x01	; 1
 c20:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	
	DIO_WRITE_PIN(CTR_PORT,RW,0);
 c24:	83 e6       	ldi	r24, 0x63	; 99
 c26:	62 e0       	ldi	r22, 0x02	; 2
 c28:	40 e0       	ldi	r20, 0x00	; 0
 c2a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	
	
	LCD_SEND_CMD(RETURN_HOME);
 c2e:	82 e0       	ldi	r24, 0x02	; 2
 c30:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 c34:	af e1       	ldi	r26, 0x1F	; 31
 c36:	be e4       	ldi	r27, 0x4E	; 78
 c38:	11 97       	sbiw	r26, 0x01	; 1
 c3a:	f1 f7       	brne	.-4      	; 0xc38 <LCD_INIT+0x6c>
 c3c:	00 c0       	rjmp	.+0      	; 0xc3e <LCD_INIT+0x72>
 c3e:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BITS);
 c40:	88 e2       	ldi	r24, 0x28	; 40
 c42:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 c46:	8f ec       	ldi	r24, 0xCF	; 207
 c48:	97 e0       	ldi	r25, 0x07	; 7
 c4a:	01 97       	sbiw	r24, 0x01	; 1
 c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_INIT+0x7e>
 c4e:	00 c0       	rjmp	.+0      	; 0xc50 <LCD_INIT+0x84>
 c50:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CURSOR_OFF_DISPLAY_ON);
 c52:	8c e0       	ldi	r24, 0x0C	; 12
 c54:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 c58:	af ec       	ldi	r26, 0xCF	; 207
 c5a:	b7 e0       	ldi	r27, 0x07	; 7
 c5c:	11 97       	sbiw	r26, 0x01	; 1
 c5e:	f1 f7       	brne	.-4      	; 0xc5c <LCD_INIT+0x90>
 c60:	00 c0       	rjmp	.+0      	; 0xc62 <LCD_INIT+0x96>
 c62:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLEAR_SCREEN);
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 c6a:	8f e0       	ldi	r24, 0x0F	; 15
 c6c:	97 e2       	ldi	r25, 0x27	; 39
 c6e:	01 97       	sbiw	r24, 0x01	; 1
 c70:	f1 f7       	brne	.-4      	; 0xc6e <LCD_INIT+0xa2>
 c72:	00 c0       	rjmp	.+0      	; 0xc74 <LCD_INIT+0xa8>
 c74:	00 00       	nop
	_delay_ms(5);
	LCD_SEND_CMD(ENTRY_MODE);
 c76:	86 e0       	ldi	r24, 0x06	; 6
 c78:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 c7c:	af ec       	ldi	r26, 0xCF	; 207
 c7e:	b7 e0       	ldi	r27, 0x07	; 7
 c80:	11 97       	sbiw	r26, 0x01	; 1
 c82:	f1 f7       	brne	.-4      	; 0xc80 <LCD_INIT+0xb4>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <LCD_INIT+0xba>
 c86:	00 00       	nop
	_delay_ms(1);
	#endif
	
	
}
 c88:	08 95       	ret

00000c8a <LCD_CLEAR_SCREEN>:
}


void LCD_CLEAR_SCREEN(void)
{
	LCD_SEND_CMD(0x01);
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
}
 c90:	08 95       	ret

00000c92 <LCD_SEND_STRING>:

void LCD_SEND_STRING(unsigned char *data)
{
 c92:	cf 93       	push	r28
 c94:	df 93       	push	r29
 c96:	ec 01       	movw	r28, r24
	while(*data != '\0')
 c98:	88 81       	ld	r24, Y
 c9a:	88 23       	and	r24, r24
 c9c:	31 f0       	breq	.+12     	; 0xcaa <LCD_SEND_STRING+0x18>
void LCD_CLEAR_SCREEN(void)
{
	LCD_SEND_CMD(0x01);
}

void LCD_SEND_STRING(unsigned char *data)
 c9e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*data != '\0')
	{
		LCD_SEND_CHAR(*data);
 ca0:	0e 94 98 05 	call	0xb30	; 0xb30 <LCD_SEND_CHAR>
	LCD_SEND_CMD(0x01);
}

void LCD_SEND_STRING(unsigned char *data)
{
	while(*data != '\0')
 ca4:	89 91       	ld	r24, Y+
 ca6:	88 23       	and	r24, r24
 ca8:	d9 f7       	brne	.-10     	; 0xca0 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
	
}
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	08 95       	ret

00000cb0 <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(unsigned char row, unsigned char col)
{
	unsigned data;
	
	if((row>2)||(row<1)||(col>16)||(col<1))
 cb0:	98 2f       	mov	r25, r24
 cb2:	91 50       	subi	r25, 0x01	; 1
 cb4:	92 30       	cpi	r25, 0x02	; 2
 cb6:	90 f4       	brcc	.+36     	; 0xcdc <LCD_MOVE_CURSOR+0x2c>
 cb8:	61 31       	cpi	r22, 0x11	; 17
 cba:	98 f4       	brcc	.+38     	; 0xce2 <LCD_MOVE_CURSOR+0x32>
 cbc:	66 23       	and	r22, r22
 cbe:	a1 f0       	breq	.+40     	; 0xce8 <LCD_MOVE_CURSOR+0x38>
	{
		data=0x80;
	}
	else if(row==1)
 cc0:	81 30       	cpi	r24, 0x01	; 1
 cc2:	29 f4       	brne	.+10     	; 0xcce <LCD_MOVE_CURSOR+0x1e>
	{
		data=0x80+col-1;
 cc4:	26 2f       	mov	r18, r22
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	21 58       	subi	r18, 0x81	; 129
 cca:	3f 4f       	sbci	r19, 0xFF	; 255
 ccc:	0f c0       	rjmp	.+30     	; 0xcec <LCD_MOVE_CURSOR+0x3c>
	}
	else if(row==2)
 cce:	82 30       	cpi	r24, 0x02	; 2
 cd0:	69 f4       	brne	.+26     	; 0xcec <LCD_MOVE_CURSOR+0x3c>
	{
		data=0xc0+col-1;
 cd2:	26 2f       	mov	r18, r22
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	21 54       	subi	r18, 0x41	; 65
 cd8:	3f 4f       	sbci	r19, 0xFF	; 255
 cda:	08 c0       	rjmp	.+16     	; 0xcec <LCD_MOVE_CURSOR+0x3c>
{
	unsigned data;
	
	if((row>2)||(row<1)||(col>16)||(col<1))
	{
		data=0x80;
 cdc:	20 e8       	ldi	r18, 0x80	; 128
 cde:	30 e0       	ldi	r19, 0x00	; 0
 ce0:	05 c0       	rjmp	.+10     	; 0xcec <LCD_MOVE_CURSOR+0x3c>
 ce2:	20 e8       	ldi	r18, 0x80	; 128
 ce4:	30 e0       	ldi	r19, 0x00	; 0
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <LCD_MOVE_CURSOR+0x3c>
 ce8:	20 e8       	ldi	r18, 0x80	; 128
 cea:	30 e0       	ldi	r19, 0x00	; 0
	else if(row==2)
	{
		data=0xc0+col-1;
	}
	
	LCD_SEND_CMD(data);
 cec:	82 2f       	mov	r24, r18
 cee:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCD_SEND_CMD>
 cf2:	8f ec       	ldi	r24, 0xCF	; 207
 cf4:	97 e0       	ldi	r25, 0x07	; 7
 cf6:	01 97       	sbiw	r24, 0x01	; 1
 cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCD_MOVE_CURSOR+0x46>
 cfa:	00 c0       	rjmp	.+0      	; 0xcfc <LCD_MOVE_CURSOR+0x4c>
 cfc:	00 00       	nop
	_delay_ms(1);
}
 cfe:	08 95       	ret

00000d00 <led_init>:
 */ 
#include "DIO.h"

void led_init(unsigned char port, unsigned char pin)
{
	DIO_SET_PIN_DIR(port,pin,1);
 d00:	41 e0       	ldi	r20, 0x01	; 1
 d02:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
}
 d06:	08 95       	ret

00000d08 <led_on>:

void led_on(unsigned char port, unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,1);
 d08:	41 e0       	ldi	r20, 0x01	; 1
 d0a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
}
 d0e:	08 95       	ret

00000d10 <led_off>:

void led_off(unsigned char port, unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,0);
 d10:	40 e0       	ldi	r20, 0x00	; 0
 d12:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
}
 d16:	08 95       	ret

00000d18 <led_togg>:

void led_togg(unsigned char port, unsigned char pin)
{
	DIO_TOG_PIN(port,pin);
 d18:	70 e0       	ldi	r23, 0x00	; 0
 d1a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_TOG_PIN>
}
 d1e:	08 95       	ret

00000d20 <led_read>:

unsigned char led_read(unsigned char port, unsigned char pin)
{
	return DIO_READ_PIN(port,pin);
 d20:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_READ_PIN>
}
 d24:	08 95       	ret

00000d26 <led_init_port>:

void led_init_port(unsigned char port)
{
	DIO_SET_PORT_DIR(port,0b11111111);
 d26:	6f ef       	ldi	r22, 0xFF	; 255
 d28:	0e 94 32 02 	call	0x464	; 0x464 <DIO_SET_PORT_DIR>
}
 d2c:	08 95       	ret

00000d2e <led_on_port>:

void led_on_port(unsigned char port)
{
	DIO_WRITE_PORT(port,0b11111111);
 d2e:	6f ef       	ldi	r22, 0xFF	; 255
 d30:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_WRITE_PORT>
}
 d34:	08 95       	ret

00000d36 <led_off_port>:

void led_off_port(unsigned char port)
{
	DIO_WRITE_PORT(port,0b00000000);
 d36:	60 e0       	ldi	r22, 0x00	; 0
 d38:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_WRITE_PORT>
}
 d3c:	08 95       	ret

00000d3e <led_togg_port>:

void led_togg_port(unsigned char port)
{
	DIO_TOG_PORT(port);
 d3e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_TOG_PORT>
}
 d42:	08 95       	ret

00000d44 <led_read_port>:

unsigned char led_read_port(unsigned char port)
{
	return DIO_READ_PORT(port);
 d44:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_READ_PORT>
}
 d48:	08 95       	ret

00000d4a <__udivmodhi4>:
 d4a:	aa 1b       	sub	r26, r26
 d4c:	bb 1b       	sub	r27, r27
 d4e:	51 e1       	ldi	r21, 0x11	; 17
 d50:	07 c0       	rjmp	.+14     	; 0xd60 <__udivmodhi4_ep>

00000d52 <__udivmodhi4_loop>:
 d52:	aa 1f       	adc	r26, r26
 d54:	bb 1f       	adc	r27, r27
 d56:	a6 17       	cp	r26, r22
 d58:	b7 07       	cpc	r27, r23
 d5a:	10 f0       	brcs	.+4      	; 0xd60 <__udivmodhi4_ep>
 d5c:	a6 1b       	sub	r26, r22
 d5e:	b7 0b       	sbc	r27, r23

00000d60 <__udivmodhi4_ep>:
 d60:	88 1f       	adc	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	5a 95       	dec	r21
 d66:	a9 f7       	brne	.-22     	; 0xd52 <__udivmodhi4_loop>
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	bc 01       	movw	r22, r24
 d6e:	cd 01       	movw	r24, r26
 d70:	08 95       	ret

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
